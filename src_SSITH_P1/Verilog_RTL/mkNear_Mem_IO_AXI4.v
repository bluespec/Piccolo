//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jul  9 16:18:23 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1 const
// axi4_slave_awready             O     1
// axi4_slave_wready              O     1
// axi4_slave_bid                 O     5
// axi4_slave_bresp               O     2
// axi4_slave_bvalid              O     1
// axi4_slave_arready             O     1
// axi4_slave_rid                 O     5
// axi4_slave_rdata               O    64
// axi4_slave_rresp               O     2
// axi4_slave_rlast               O     1
// axi4_slave_rvalid              O     1
// get_timer_interrupt_req_get    O     1 reg
// RDY_get_timer_interrupt_req_get  O     1 reg
// get_sw_interrupt_req_get       O     1 reg
// RDY_get_sw_interrupt_req_get   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// axi4_slave_awid                I     5
// axi4_slave_awaddr              I    64
// axi4_slave_awlen               I     8
// axi4_slave_awsize              I     3
// axi4_slave_awburst             I     2
// axi4_slave_awlock              I     1
// axi4_slave_awcache             I     4
// axi4_slave_awprot              I     3
// axi4_slave_awqos               I     4
// axi4_slave_awregion            I     4
// axi4_slave_wdata               I    64
// axi4_slave_wstrb               I     8
// axi4_slave_wlast               I     1
// axi4_slave_bready              I     1
// axi4_slave_arid                I     5
// axi4_slave_araddr              I    64
// axi4_slave_arlen               I     8
// axi4_slave_arsize              I     3
// axi4_slave_arburst             I     2
// axi4_slave_arlock              I     1
// axi4_slave_arcache             I     4
// axi4_slave_arprot              I     3
// axi4_slave_arqos               I     4
// axi4_slave_arregion            I     4
// axi4_slave_rready              I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// axi4_slave_awvalid             I     1
// axi4_slave_wvalid              I     1
// axi4_slave_arvalid             I     1
// EN_get_timer_interrupt_req_get  I     1
// EN_get_sw_interrupt_req_get    I     1
//
// Combinational paths from inputs to outputs:
//   (axi4_slave_awid,
//    axi4_slave_awaddr,
//    axi4_slave_awlen,
//    axi4_slave_awsize,
//    axi4_slave_awburst,
//    axi4_slave_awlock,
//    axi4_slave_awcache,
//    axi4_slave_awprot,
//    axi4_slave_awqos,
//    axi4_slave_awregion,
//    axi4_slave_wdata,
//    axi4_slave_wstrb,
//    axi4_slave_wlast,
//    axi4_slave_awvalid,
//    axi4_slave_wvalid) -> axi4_slave_bid
//   (axi4_slave_awid,
//    axi4_slave_awaddr,
//    axi4_slave_awlen,
//    axi4_slave_awsize,
//    axi4_slave_awburst,
//    axi4_slave_awlock,
//    axi4_slave_awcache,
//    axi4_slave_awprot,
//    axi4_slave_awqos,
//    axi4_slave_awregion,
//    axi4_slave_wdata,
//    axi4_slave_wstrb,
//    axi4_slave_wlast,
//    axi4_slave_awvalid,
//    axi4_slave_wvalid) -> axi4_slave_bresp
//   (axi4_slave_awid,
//    axi4_slave_awaddr,
//    axi4_slave_awlen,
//    axi4_slave_awsize,
//    axi4_slave_awburst,
//    axi4_slave_awlock,
//    axi4_slave_awcache,
//    axi4_slave_awprot,
//    axi4_slave_awqos,
//    axi4_slave_awregion,
//    axi4_slave_wdata,
//    axi4_slave_wstrb,
//    axi4_slave_wlast,
//    axi4_slave_awvalid,
//    axi4_slave_wvalid) -> axi4_slave_buser
//   (axi4_slave_awid,
//    axi4_slave_awaddr,
//    axi4_slave_awlen,
//    axi4_slave_awsize,
//    axi4_slave_awburst,
//    axi4_slave_awlock,
//    axi4_slave_awcache,
//    axi4_slave_awprot,
//    axi4_slave_awqos,
//    axi4_slave_awregion,
//    axi4_slave_wdata,
//    axi4_slave_wstrb,
//    axi4_slave_wlast,
//    axi4_slave_awvalid,
//    axi4_slave_wvalid) -> axi4_slave_bvalid
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_rid
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_rdata
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_rresp
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_rlast
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_ruser
//   (axi4_slave_arid,
//    axi4_slave_araddr,
//    axi4_slave_arlen,
//    axi4_slave_arsize,
//    axi4_slave_arburst,
//    axi4_slave_arlock,
//    axi4_slave_arcache,
//    axi4_slave_arprot,
//    axi4_slave_arqos,
//    axi4_slave_arregion,
//    axi4_slave_arvalid) -> axi4_slave_rvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNear_Mem_IO_AXI4(CLK,
			  RST_N,

			  EN_server_reset_request_put,
			  RDY_server_reset_request_put,

			  EN_server_reset_response_get,
			  RDY_server_reset_response_get,

			  set_addr_map_addr_base,
			  set_addr_map_addr_lim,
			  EN_set_addr_map,
			  RDY_set_addr_map,

			  axi4_slave_awid,
			  axi4_slave_awaddr,
			  axi4_slave_awlen,
			  axi4_slave_awsize,
			  axi4_slave_awburst,
			  axi4_slave_awlock,
			  axi4_slave_awcache,
			  axi4_slave_awprot,
			  axi4_slave_awqos,
			  axi4_slave_awregion,
			  axi4_slave_awvalid,

			  axi4_slave_awready,

			  axi4_slave_wdata,
			  axi4_slave_wstrb,
			  axi4_slave_wlast,
			  axi4_slave_wvalid,

			  axi4_slave_wready,

			  axi4_slave_bid,

			  axi4_slave_bresp,

			  axi4_slave_bvalid,

			  axi4_slave_bready,

			  axi4_slave_arid,
			  axi4_slave_araddr,
			  axi4_slave_arlen,
			  axi4_slave_arsize,
			  axi4_slave_arburst,
			  axi4_slave_arlock,
			  axi4_slave_arcache,
			  axi4_slave_arprot,
			  axi4_slave_arqos,
			  axi4_slave_arregion,
			  axi4_slave_arvalid,

			  axi4_slave_arready,

			  axi4_slave_rid,

			  axi4_slave_rdata,

			  axi4_slave_rresp,

			  axi4_slave_rlast,

			  axi4_slave_rvalid,

			  axi4_slave_rready,

			  EN_get_timer_interrupt_req_get,
			  get_timer_interrupt_req_get,
			  RDY_get_timer_interrupt_req_get,

			  EN_get_sw_interrupt_req_get,
			  get_sw_interrupt_req_get,
			  RDY_get_sw_interrupt_req_get);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method axi4_slave_aw_awflit
  input  [4 : 0] axi4_slave_awid;
  input  [63 : 0] axi4_slave_awaddr;
  input  [7 : 0] axi4_slave_awlen;
  input  [2 : 0] axi4_slave_awsize;
  input  [1 : 0] axi4_slave_awburst;
  input  axi4_slave_awlock;
  input  [3 : 0] axi4_slave_awcache;
  input  [2 : 0] axi4_slave_awprot;
  input  [3 : 0] axi4_slave_awqos;
  input  [3 : 0] axi4_slave_awregion;
  input  axi4_slave_awvalid;

  // value method axi4_slave_aw_awready
  output axi4_slave_awready;

  // action method axi4_slave_w_wflit
  input  [63 : 0] axi4_slave_wdata;
  input  [7 : 0] axi4_slave_wstrb;
  input  axi4_slave_wlast;
  input  axi4_slave_wvalid;

  // value method axi4_slave_w_wready
  output axi4_slave_wready;

  // value method axi4_slave_b_bid
  output [4 : 0] axi4_slave_bid;

  // value method axi4_slave_b_bresp
  output [1 : 0] axi4_slave_bresp;

  // value method axi4_slave_b_buser

  // value method axi4_slave_b_bvalid
  output axi4_slave_bvalid;

  // action method axi4_slave_b_bready
  input  axi4_slave_bready;

  // action method axi4_slave_ar_arflit
  input  [4 : 0] axi4_slave_arid;
  input  [63 : 0] axi4_slave_araddr;
  input  [7 : 0] axi4_slave_arlen;
  input  [2 : 0] axi4_slave_arsize;
  input  [1 : 0] axi4_slave_arburst;
  input  axi4_slave_arlock;
  input  [3 : 0] axi4_slave_arcache;
  input  [2 : 0] axi4_slave_arprot;
  input  [3 : 0] axi4_slave_arqos;
  input  [3 : 0] axi4_slave_arregion;
  input  axi4_slave_arvalid;

  // value method axi4_slave_ar_arready
  output axi4_slave_arready;

  // value method axi4_slave_r_rid
  output [4 : 0] axi4_slave_rid;

  // value method axi4_slave_r_rdata
  output [63 : 0] axi4_slave_rdata;

  // value method axi4_slave_r_rresp
  output [1 : 0] axi4_slave_rresp;

  // value method axi4_slave_r_rlast
  output axi4_slave_rlast;

  // value method axi4_slave_r_ruser

  // value method axi4_slave_r_rvalid
  output axi4_slave_rvalid;

  // action method axi4_slave_r_rready
  input  axi4_slave_rready;

  // actionvalue method get_timer_interrupt_req_get
  input  EN_get_timer_interrupt_req_get;
  output get_timer_interrupt_req_get;
  output RDY_get_timer_interrupt_req_get;

  // actionvalue method get_sw_interrupt_req_get
  input  EN_get_sw_interrupt_req_get;
  output get_sw_interrupt_req_get;
  output RDY_get_sw_interrupt_req_get;

  // signals for module outputs
  wire [63 : 0] axi4_slave_rdata;
  wire [4 : 0] axi4_slave_bid, axi4_slave_rid;
  wire [1 : 0] axi4_slave_bresp, axi4_slave_rresp;
  wire RDY_get_sw_interrupt_req_get,
       RDY_get_timer_interrupt_req_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       axi4_slave_arready,
       axi4_slave_awready,
       axi4_slave_bvalid,
       axi4_slave_rlast,
       axi4_slave_rvalid,
       axi4_slave_wready,
       get_sw_interrupt_req_get,
       get_timer_interrupt_req_get;

  // inlined wires
  wire [98 : 0] slave_xactor_shim_arff_rv$port0__write_1,
		slave_xactor_shim_arff_rv$port1__read,
		slave_xactor_shim_arff_rv$port2__read,
		slave_xactor_shim_arff_rv$port3__read,
		slave_xactor_shim_awff_rv$port0__write_1,
		slave_xactor_shim_awff_rv$port1__read,
		slave_xactor_shim_awff_rv$port2__read,
		slave_xactor_shim_awff_rv$port3__read;
  wire [97 : 0] slave_xactor_ug_slave_u_ar_putWire$wget,
		slave_xactor_ug_slave_u_aw_putWire$wget;
  wire [73 : 0] slave_xactor_shim_wff_rv$port0__write_1,
		slave_xactor_shim_wff_rv$port1__read,
		slave_xactor_shim_wff_rv$port2__read,
		slave_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] slave_xactor_shim_rff_rv$port0__write_1,
		slave_xactor_shim_rff_rv$port1__read,
		slave_xactor_shim_rff_rv$port2__read,
		slave_xactor_shim_rff_rv$port3__read,
		slave_xactor_ug_slave_u_w_putWire$wget;
  wire [63 : 0] crg_time$port0__write_1,
		crg_time$port1__write_1,
		crg_time$port2__read,
		crg_timecmp$port1__write_1,
		crg_timecmp$port2__read;
  wire [7 : 0] slave_xactor_shim_bff_rv$port0__write_1,
	       slave_xactor_shim_bff_rv$port1__read,
	       slave_xactor_shim_bff_rv$port2__read,
	       slave_xactor_shim_bff_rv$port3__read;
  wire crg_time$EN_port1__write,
       crg_timecmp$EN_port1__write,
       slave_xactor_ug_slave_u_ar_putWire$whas,
       slave_xactor_ug_slave_u_aw_putWire$whas,
       slave_xactor_ug_slave_u_b_dropWire$whas,
       slave_xactor_ug_slave_u_r_dropWire$whas,
       slave_xactor_ug_slave_u_w_putWire$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register crg_time
  reg [63 : 0] crg_time;
  wire [63 : 0] crg_time$D_IN;
  wire crg_time$EN;

  // register crg_timecmp
  reg [63 : 0] crg_timecmp;
  wire [63 : 0] crg_timecmp$D_IN;
  wire crg_timecmp$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip$D_IN, rg_msip$EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip$D_IN, rg_mtip$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register slave_xactor_clearing
  reg slave_xactor_clearing;
  wire slave_xactor_clearing$D_IN, slave_xactor_clearing$EN;

  // register slave_xactor_shim_arff_rv
  reg [98 : 0] slave_xactor_shim_arff_rv;
  wire [98 : 0] slave_xactor_shim_arff_rv$D_IN;
  wire slave_xactor_shim_arff_rv$EN;

  // register slave_xactor_shim_awff_rv
  reg [98 : 0] slave_xactor_shim_awff_rv;
  wire [98 : 0] slave_xactor_shim_awff_rv$D_IN;
  wire slave_xactor_shim_awff_rv$EN;

  // register slave_xactor_shim_bff_rv
  reg [7 : 0] slave_xactor_shim_bff_rv;
  wire [7 : 0] slave_xactor_shim_bff_rv$D_IN;
  wire slave_xactor_shim_bff_rv$EN;

  // register slave_xactor_shim_rff_rv
  reg [72 : 0] slave_xactor_shim_rff_rv;
  wire [72 : 0] slave_xactor_shim_rff_rv$D_IN;
  wire slave_xactor_shim_rff_rv$EN;

  // register slave_xactor_shim_wff_rv
  reg [73 : 0] slave_xactor_shim_wff_rv;
  wire [73 : 0] slave_xactor_shim_wff_rv$D_IN;
  wire slave_xactor_shim_wff_rv$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_sw_interrupt_req
  wire f_sw_interrupt_req$CLR,
       f_sw_interrupt_req$DEQ,
       f_sw_interrupt_req$D_IN,
       f_sw_interrupt_req$D_OUT,
       f_sw_interrupt_req$EMPTY_N,
       f_sw_interrupt_req$ENQ,
       f_sw_interrupt_req$FULL_N;

  // ports of submodule f_timer_interrupt_req
  wire f_timer_interrupt_req$CLR,
       f_timer_interrupt_req$DEQ,
       f_timer_interrupt_req$D_IN,
       f_timer_interrupt_req$D_OUT,
       f_timer_interrupt_req$EMPTY_N,
       f_timer_interrupt_req$ENQ,
       f_timer_interrupt_req$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_compare,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_soft_reset,
       CAN_FIRE_RL_rl_tick_timer,
       CAN_FIRE_RL_slave_xactor_do_clear,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       CAN_FIRE_axi4_slave_ar_arflit,
       CAN_FIRE_axi4_slave_aw_awflit,
       CAN_FIRE_axi4_slave_b_bready,
       CAN_FIRE_axi4_slave_r_rready,
       CAN_FIRE_axi4_slave_w_wflit,
       CAN_FIRE_get_sw_interrupt_req_get,
       CAN_FIRE_get_timer_interrupt_req_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       WILL_FIRE_RL_rl_compare,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_soft_reset,
       WILL_FIRE_RL_rl_tick_timer,
       WILL_FIRE_RL_slave_xactor_do_clear,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       WILL_FIRE_axi4_slave_ar_arflit,
       WILL_FIRE_axi4_slave_aw_awflit,
       WILL_FIRE_axi4_slave_b_bready,
       WILL_FIRE_axi4_slave_r_rready,
       WILL_FIRE_axi4_slave_w_wflit,
       WILL_FIRE_get_sw_interrupt_req_get,
       WILL_FIRE_get_timer_interrupt_req_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map;

  // inputs to muxes for submodule ports
  wire MUX_crg_time$port1__write_1__SEL_1,
       MUX_crg_timecmp$port1__write_1__SEL_1,
       MUX_rg_msip$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h13099;
  reg [31 : 0] v__h13231;
  reg [31 : 0] v__h4164;
  reg [31 : 0] v__h4672;
  reg [31 : 0] v__h4886;
  reg [31 : 0] v__h5109;
  reg [31 : 0] v__h5435;
  reg [31 : 0] v__h4408;
  reg [31 : 0] v__h5925;
  reg [31 : 0] v__h6181;
  reg [31 : 0] v__h11750;
  reg [31 : 0] v__h12059;
  reg [31 : 0] v__h12451;
  reg [31 : 0] v__h12561;
  reg [31 : 0] v__h12668;
  reg [31 : 0] v__h4158;
  reg [31 : 0] v__h4402;
  reg [31 : 0] v__h4666;
  reg [31 : 0] v__h4880;
  reg [31 : 0] v__h5103;
  reg [31 : 0] v__h5429;
  reg [31 : 0] v__h5919;
  reg [31 : 0] v__h6175;
  reg [31 : 0] v__h11744;
  reg [31 : 0] v__h12053;
  reg [31 : 0] v__h12445;
  reg [31 : 0] v__h12555;
  reg [31 : 0] v__h12662;
  reg [31 : 0] v__h13093;
  reg [31 : 0] v__h13225;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] _theResult___fst__h5030;
  reg [1 : 0] CASE_byte_addr142_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1,
	      CASE_byte_addr837_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q3;
  wire [71 : 0] slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4;
  wire [66 : 0] IF_slave_xactor_shim_arff_rv_port1__read__9_BI_ETC___d168;
  wire [63 : 0] byte_addr__h4837,
		byte_addr__h6142,
		crg_timecmp_port1__read__53_AND_INV_SEXT_slave_ETC___d292,
		mask__h6615,
		new_time__h7873,
		new_timecmp__h6584,
		old_time__h10432,
		rdata___1__h5026,
		x__h5248,
		x__h6626,
		x__h7915,
		y__h6627,
		y__h6628;
  wire [7 : 0] SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d255,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d258,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d262,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d265,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d269,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d272,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d276,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d279;
  wire [6 : 0] slave_xactor_shim_bff_rvport1__read_BITS_6_TO_0__q2;
  wire IF_slave_xactor_shim_awff_rv_port1__read__76_B_ETC___d193,
       NOT_cfg_verbosity_read__2_ULE_1_5___d76,
       NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69,
       rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189,
       slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116,
       slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d149,
       slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184,
       slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d324;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // action method axi4_slave_aw_awflit
  assign CAN_FIRE_axi4_slave_aw_awflit = 1'd1 ;
  assign WILL_FIRE_axi4_slave_aw_awflit = axi4_slave_awvalid ;

  // value method axi4_slave_aw_awready
  assign axi4_slave_awready = !slave_xactor_shim_awff_rv[98] ;

  // action method axi4_slave_w_wflit
  assign CAN_FIRE_axi4_slave_w_wflit = 1'd1 ;
  assign WILL_FIRE_axi4_slave_w_wflit = axi4_slave_wvalid ;

  // value method axi4_slave_w_wready
  assign axi4_slave_wready = !slave_xactor_shim_wff_rv[73] ;

  // value method axi4_slave_b_bid
  assign axi4_slave_bid =
	     slave_xactor_shim_bff_rvport1__read_BITS_6_TO_0__q2[6:2] ;

  // value method axi4_slave_b_bresp
  assign axi4_slave_bresp =
	     slave_xactor_shim_bff_rvport1__read_BITS_6_TO_0__q2[1:0] ;

  // value method axi4_slave_b_bvalid
  assign axi4_slave_bvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // action method axi4_slave_b_bready
  assign CAN_FIRE_axi4_slave_b_bready = 1'd1 ;
  assign WILL_FIRE_axi4_slave_b_bready = 1'd1 ;

  // action method axi4_slave_ar_arflit
  assign CAN_FIRE_axi4_slave_ar_arflit = 1'd1 ;
  assign WILL_FIRE_axi4_slave_ar_arflit = axi4_slave_arvalid ;

  // value method axi4_slave_ar_arready
  assign axi4_slave_arready = !slave_xactor_shim_arff_rv[98] ;

  // value method axi4_slave_r_rid
  assign axi4_slave_rid =
	     slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4[71:67] ;

  // value method axi4_slave_r_rdata
  assign axi4_slave_rdata =
	     slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4[66:3] ;

  // value method axi4_slave_r_rresp
  assign axi4_slave_rresp =
	     slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4[2:1] ;

  // value method axi4_slave_r_rlast
  assign axi4_slave_rlast =
	     slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4[0] ;

  // value method axi4_slave_r_rvalid
  assign axi4_slave_rvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // action method axi4_slave_r_rready
  assign CAN_FIRE_axi4_slave_r_rready = 1'd1 ;
  assign WILL_FIRE_axi4_slave_r_rready = 1'd1 ;

  // actionvalue method get_timer_interrupt_req_get
  assign get_timer_interrupt_req_get = f_timer_interrupt_req$D_OUT ;
  assign RDY_get_timer_interrupt_req_get = f_timer_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_timer_interrupt_req_get =
	     f_timer_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_timer_interrupt_req_get =
	     EN_get_timer_interrupt_req_get ;

  // actionvalue method get_sw_interrupt_req_get
  assign get_sw_interrupt_req_get = f_sw_interrupt_req$D_OUT ;
  assign RDY_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_sw_interrupt_req_get = EN_get_sw_interrupt_req_get ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_sw_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_sw_interrupt_req(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_sw_interrupt_req$D_IN),
							     .ENQ(f_sw_interrupt_req$ENQ),
							     .DEQ(f_sw_interrupt_req$DEQ),
							     .CLR(f_sw_interrupt_req$CLR),
							     .D_OUT(f_sw_interrupt_req$D_OUT),
							     .FULL_N(f_sw_interrupt_req$FULL_N),
							     .EMPTY_N(f_sw_interrupt_req$EMPTY_N));

  // submodule f_timer_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_timer_interrupt_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_timer_interrupt_req$D_IN),
								.ENQ(f_timer_interrupt_req$ENQ),
								.DEQ(f_timer_interrupt_req$DEQ),
								.CLR(f_timer_interrupt_req$CLR),
								.D_OUT(f_timer_interrupt_req$D_OUT),
								.FULL_N(f_timer_interrupt_req$FULL_N),
								.EMPTY_N(f_timer_interrupt_req$EMPTY_N));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_soft_reset
  assign CAN_FIRE_RL_rl_soft_reset = f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_soft_reset = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_slave_xactor_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     slave_xactor_ug_slave_u_aw_putWire$whas &&
	     slave_xactor_shim_awff_rv[98] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     !slave_xactor_shim_awff_rv[98] &&
	     slave_xactor_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ;

  // rule RL_slave_xactor_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     slave_xactor_ug_slave_u_w_putWire$whas &&
	     slave_xactor_shim_wff_rv[73] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     !slave_xactor_shim_wff_rv[73] &&
	     slave_xactor_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ;

  // rule RL_slave_xactor_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     slave_xactor_ug_slave_u_ar_putWire$whas &&
	     slave_xactor_shim_arff_rv[98] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     !slave_xactor_shim_arff_rv[98] &&
	     slave_xactor_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_arff_rv$port1__read[98] &&
	     !slave_xactor_shim_rff_rv[72] &&
	     rg_state &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_compare
  assign CAN_FIRE_RL_rl_compare =
	     f_timer_interrupt_req$FULL_N && rg_state &&
	     rg_mtip !=
	     NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69 &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_compare = CAN_FIRE_RL_rl_compare ;

  // rule RL_rl_tick_timer
  assign CAN_FIRE_RL_rl_tick_timer =
	     rg_state && crg_time != 64'hFFFFFFFFFFFFFFFF &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_tick_timer = CAN_FIRE_RL_rl_tick_timer ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[98] &&
	     slave_xactor_shim_wff_rv$port1__read[73] &&
	     !slave_xactor_shim_bff_rv[7] &&
	     IF_slave_xactor_shim_awff_rv_port1__read__76_B_ETC___d193 &&
	     rg_state &&
	     !f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_process_wr_req =
	     CAN_FIRE_RL_rl_process_wr_req && !WILL_FIRE_RL_rl_compare ;

  // rule RL_slave_xactor_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     slave_xactor_shim_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     slave_xactor_ug_slave_u_b_dropWire$whas &&
	     !slave_xactor_shim_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     slave_xactor_shim_bff_rv$port1__read[7] &&
	     slave_xactor_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ;

  // rule RL_slave_xactor_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     slave_xactor_shim_rff_rv$port1__read[72] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     slave_xactor_ug_slave_u_r_dropWire$whas &&
	     !slave_xactor_shim_rff_rv$port1__read[72] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     slave_xactor_shim_rff_rv$port1__read[72] &&
	     slave_xactor_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ;

  // rule RL_slave_xactor_do_clear
  assign CAN_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;
  assign WILL_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_crg_time$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     (byte_addr__h6142 == 64'h000000000000BFF8 ||
	      byte_addr__h6142 == 64'h000000000000BFFC) ;
  assign MUX_crg_timecmp$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     (byte_addr__h6142 == 64'h0000000000004000 ||
	      byte_addr__h6142 == 64'h0000000000004004) ;
  assign MUX_rg_msip$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     byte_addr__h6142 == 64'h0 &&
	     !rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189 ;
  assign MUX_rg_state$write_1__SEL_1 =
	     f_reset_reqs$EMPTY_N && !WILL_FIRE_RL_rl_reset ;
  assign MUX_rg_state$write_1__SEL_2 =
	     !slave_xactor_clearing && f_reset_reqs$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     !rg_state ;

  // inlined wires
  assign slave_xactor_ug_slave_u_aw_putWire$wget =
	     { axi4_slave_awid,
	       axi4_slave_awaddr,
	       axi4_slave_awlen,
	       axi4_slave_awsize,
	       axi4_slave_awburst,
	       axi4_slave_awlock,
	       axi4_slave_awcache,
	       axi4_slave_awprot,
	       axi4_slave_awqos,
	       axi4_slave_awregion } ;
  assign slave_xactor_ug_slave_u_aw_putWire$whas =
	     axi4_slave_awvalid && !slave_xactor_shim_awff_rv[98] ;
  assign slave_xactor_ug_slave_u_w_putWire$wget =
	     { axi4_slave_wdata, axi4_slave_wstrb, axi4_slave_wlast } ;
  assign slave_xactor_ug_slave_u_w_putWire$whas =
	     axi4_slave_wvalid && !slave_xactor_shim_wff_rv[73] ;
  assign slave_xactor_ug_slave_u_ar_putWire$wget =
	     { axi4_slave_arid,
	       axi4_slave_araddr,
	       axi4_slave_arlen,
	       axi4_slave_arsize,
	       axi4_slave_arburst,
	       axi4_slave_arlock,
	       axi4_slave_arcache,
	       axi4_slave_arprot,
	       axi4_slave_arqos,
	       axi4_slave_arregion } ;
  assign slave_xactor_ug_slave_u_ar_putWire$whas =
	     axi4_slave_arvalid && !slave_xactor_shim_arff_rv[98] ;
  assign slave_xactor_ug_slave_u_b_dropWire$whas =
	     slave_xactor_shim_bff_rv$port1__read[7] && axi4_slave_bready ;
  assign slave_xactor_ug_slave_u_r_dropWire$whas =
	     slave_xactor_shim_rff_rv$port1__read[72] && axi4_slave_rready ;
  assign slave_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_aw_putWire$wget } ;
  assign slave_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ?
	       slave_xactor_shim_awff_rv$port0__write_1 :
	       slave_xactor_shim_awff_rv ;
  assign slave_xactor_shim_awff_rv$port2__read =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port1__read ;
  assign slave_xactor_shim_awff_rv$port3__read =
	     slave_xactor_clearing ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port2__read ;
  assign slave_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_w_putWire$wget } ;
  assign slave_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ?
	       slave_xactor_shim_wff_rv$port0__write_1 :
	       slave_xactor_shim_wff_rv ;
  assign slave_xactor_shim_wff_rv$port2__read =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port1__read ;
  assign slave_xactor_shim_wff_rv$port3__read =
	     slave_xactor_clearing ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port2__read ;
  assign slave_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1,
	       slave_xactor_shim_awff_rv$port1__read[97:93],
	       slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ?
		 2'd3 :
		 CASE_byte_addr142_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 } ;
  assign slave_xactor_shim_bff_rv$port1__read =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       slave_xactor_shim_bff_rv$port0__write_1 :
	       slave_xactor_shim_bff_rv ;
  assign slave_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ?
	       8'd42 :
	       slave_xactor_shim_bff_rv$port1__read ;
  assign slave_xactor_shim_bff_rv$port3__read =
	     slave_xactor_clearing ?
	       8'd42 :
	       slave_xactor_shim_bff_rv$port2__read ;
  assign slave_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_ar_putWire$wget } ;
  assign slave_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ?
	       slave_xactor_shim_arff_rv$port0__write_1 :
	       slave_xactor_shim_arff_rv ;
  assign slave_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_rl_process_rd_req ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port1__read ;
  assign slave_xactor_shim_arff_rv$port3__read =
	     slave_xactor_clearing ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port2__read ;
  assign slave_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       slave_xactor_shim_arff_rv$port1__read[97:93],
	       IF_slave_xactor_shim_arff_rv_port1__read__9_BI_ETC___d168 } ;
  assign slave_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_rl_process_rd_req ?
	       slave_xactor_shim_rff_rv$port0__write_1 :
	       slave_xactor_shim_rff_rv ;
  assign slave_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port1__read ;
  assign slave_xactor_shim_rff_rv$port3__read =
	     slave_xactor_clearing ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port2__read ;
  assign crg_time$port0__write_1 = crg_time + 64'd1 ;
  assign crg_time$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     (byte_addr__h6142 == 64'h000000000000BFF8 ||
	      byte_addr__h6142 == 64'h000000000000BFFC) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_time$port1__write_1 =
	     MUX_crg_time$port1__write_1__SEL_1 ? new_time__h7873 : 64'd1 ;
  assign crg_time$port2__read =
	     crg_time$EN_port1__write ?
	       crg_time$port1__write_1 :
	       old_time__h10432 ;
  assign crg_timecmp$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     (byte_addr__h6142 == 64'h0000000000004000 ||
	      byte_addr__h6142 == 64'h0000000000004004) ||
	     WILL_FIRE_RL_rl_reset ;
  assign crg_timecmp$port1__write_1 =
	     MUX_crg_timecmp$port1__write_1__SEL_1 ?
	       new_timecmp__h6584 :
	       64'd0 ;
  assign crg_timecmp$port2__read =
	     crg_timecmp$EN_port1__write ?
	       crg_timecmp$port1__write_1 :
	       crg_timecmp ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register crg_time
  assign crg_time$D_IN = crg_time$port2__read ;
  assign crg_time$EN = 1'b1 ;

  // register crg_timecmp
  assign crg_timecmp$D_IN = crg_timecmp$port2__read ;
  assign crg_timecmp$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_msip
  assign rg_msip$D_IN =
	     MUX_rg_msip$write_1__SEL_1 &&
	     slave_xactor_shim_wff_rv$port1__read[9] ;
  assign rg_msip$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	     byte_addr__h6142 == 64'h0 &&
	     !rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189 ||
	     WILL_FIRE_RL_rl_reset ;

  // register rg_mtip
  assign rg_mtip$D_IN =
	     !WILL_FIRE_RL_rl_compare ||
	     NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69 ;
  assign rg_mtip$EN = WILL_FIRE_RL_rl_compare || WILL_FIRE_RL_rl_reset ;

  // register rg_state
  assign rg_state$D_IN = !WILL_FIRE_RL_rl_soft_reset ;
  assign rg_state$EN = WILL_FIRE_RL_rl_soft_reset || WILL_FIRE_RL_rl_reset ;

  // register slave_xactor_clearing
  assign slave_xactor_clearing$D_IN = !slave_xactor_clearing ;
  assign slave_xactor_clearing$EN =
	     slave_xactor_clearing || WILL_FIRE_RL_rl_reset ;

  // register slave_xactor_shim_arff_rv
  assign slave_xactor_shim_arff_rv$D_IN =
	     slave_xactor_shim_arff_rv$port3__read ;
  assign slave_xactor_shim_arff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_awff_rv
  assign slave_xactor_shim_awff_rv$D_IN =
	     slave_xactor_shim_awff_rv$port3__read ;
  assign slave_xactor_shim_awff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_bff_rv
  assign slave_xactor_shim_bff_rv$D_IN =
	     slave_xactor_shim_bff_rv$port3__read ;
  assign slave_xactor_shim_bff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_rff_rv
  assign slave_xactor_shim_rff_rv$D_IN =
	     slave_xactor_shim_rff_rv$port3__read ;
  assign slave_xactor_shim_rff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_wff_rv
  assign slave_xactor_shim_wff_rv$D_IN =
	     slave_xactor_shim_wff_rv$port3__read ;
  assign slave_xactor_shim_wff_rv$EN = 1'b1 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_sw_interrupt_req
  assign f_sw_interrupt_req$D_IN = slave_xactor_shim_wff_rv$port1__read[9] ;
  assign f_sw_interrupt_req$ENQ = MUX_rg_msip$write_1__SEL_1 ;
  assign f_sw_interrupt_req$DEQ = EN_get_sw_interrupt_req_get ;
  assign f_sw_interrupt_req$CLR = MUX_rg_state$write_1__SEL_2 ;

  // submodule f_timer_interrupt_req
  assign f_timer_interrupt_req$D_IN =
	     NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69 ;
  assign f_timer_interrupt_req$ENQ = CAN_FIRE_RL_rl_compare ;
  assign f_timer_interrupt_req$DEQ = EN_get_timer_interrupt_req_get ;
  assign f_timer_interrupt_req$CLR = MUX_rg_state$write_1__SEL_2 ;

  // remaining internal signals
  assign IF_slave_xactor_shim_arff_rv_port1__read__9_BI_ETC___d168 =
	     { x__h5248,
	       slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ?
		 2'd3 :
		 CASE_byte_addr837_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q3,
	       1'd1 } ;
  assign IF_slave_xactor_shim_awff_rv_port1__read__76_B_ETC___d193 =
	     slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ?
	       slave_xactor_shim_wff_rv$port1__read[73] :
	       byte_addr__h6142 != 64'h0 ||
	       rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189 ||
	       f_sw_interrupt_req$FULL_N ;
  assign NOT_cfg_verbosity_read__2_ULE_1_5___d76 = cfg_verbosity > 4'd1 ;
  assign NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69 =
	     crg_time >= crg_timecmp ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d255 =
	     {8{slave_xactor_shim_wff_rv$port1__read[8]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d258 =
	     {8{slave_xactor_shim_wff_rv$port1__read[7]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d262 =
	     {8{slave_xactor_shim_wff_rv$port1__read[6]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d265 =
	     {8{slave_xactor_shim_wff_rv$port1__read[5]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d269 =
	     {8{slave_xactor_shim_wff_rv$port1__read[4]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d272 =
	     {8{slave_xactor_shim_wff_rv$port1__read[3]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d276 =
	     {8{slave_xactor_shim_wff_rv$port1__read[2]}} ;
  assign SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d279 =
	     {8{slave_xactor_shim_wff_rv$port1__read[1]}} ;
  assign byte_addr__h4837 =
	     slave_xactor_shim_arff_rv$port1__read[92:29] - rg_addr_base ;
  assign byte_addr__h6142 =
	     slave_xactor_shim_awff_rv$port1__read[92:29] - rg_addr_base ;
  assign crg_timecmp_port1__read__53_AND_INV_SEXT_slave_ETC___d292 =
	     new_timecmp__h6584 - old_time__h10432 ;
  assign mask__h6615 =
	     { SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d255,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d258,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d262,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d265,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d269,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d272,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d276,
	       SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d279 } ;
  assign new_time__h7873 = x__h7915 | y__h6627 ;
  assign new_timecmp__h6584 = x__h6626 | y__h6627 ;
  assign old_time__h10432 =
	     CAN_FIRE_RL_rl_tick_timer ? crg_time$port0__write_1 : crg_time ;
  assign rdata___1__h5026 = { 63'd0, rg_msip } ;
  assign rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189 =
	     rg_msip == slave_xactor_shim_wff_rv$port1__read[9] ;
  assign slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 =
	     slave_xactor_shim_arff_rv$port1__read[92:29] < rg_addr_base ;
  assign slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d149 =
	     (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	      byte_addr__h4837 != 64'h0 &&
	      byte_addr__h4837 != 64'h0000000000004000 &&
	      byte_addr__h4837 != 64'h000000000000BFF8 &&
	      byte_addr__h4837 != 64'h0000000000000004 &&
	      byte_addr__h4837 != 64'h0000000000004004 &&
	      byte_addr__h4837 != 64'h000000000000BFFC) &&
	     slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd0 &&
	     slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd1 &&
	     slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd2 ;
  assign slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 =
	     slave_xactor_shim_awff_rv$port1__read[92:29] < rg_addr_base ;
  assign slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d324 =
	     (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	      byte_addr__h6142 != 64'h0 &&
	      byte_addr__h6142 != 64'h0000000000004000 &&
	      byte_addr__h6142 != 64'h000000000000BFF8 &&
	      byte_addr__h6142 != 64'h0000000000000004 &&
	      byte_addr__h6142 != 64'h0000000000004004 &&
	      byte_addr__h6142 != 64'h000000000000BFFC) &&
	     slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd0 &&
	     slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd1 &&
	     slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd2 ;
  assign slave_xactor_shim_bff_rvport1__read_BITS_6_TO_0__q2 =
	     slave_xactor_shim_bff_rv$port1__read[6:0] ;
  assign slave_xactor_shim_rff_rvport1__read_BITS_71_TO_0__q4 =
	     slave_xactor_shim_rff_rv$port1__read[71:0] ;
  assign x__h5248 =
	     slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ?
	       64'd0 :
	       _theResult___fst__h5030 ;
  assign x__h6626 = crg_timecmp & y__h6628 ;
  assign x__h7915 = old_time__h10432 & y__h6628 ;
  assign y__h6627 = slave_xactor_shim_wff_rv$port1__read[72:9] & mask__h6615 ;
  assign y__h6628 =
	     { ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d255,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d258,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d262,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d265,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d269,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d272,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d276,
	       ~SEXT_slave_xactor_shim_wff_rv_port1__read__78__ETC___d279 } ;
  always@(byte_addr__h6142)
  begin
    case (byte_addr__h6142)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  CASE_byte_addr142_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd0;
      default: CASE_byte_addr142_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd3;
    endcase
  end
  always@(byte_addr__h4837 or rdata___1__h5026 or crg_timecmp or crg_time)
  begin
    case (byte_addr__h4837)
      64'h0: _theResult___fst__h5030 = rdata___1__h5026;
      64'h0000000000000004: _theResult___fst__h5030 = 64'd0;
      64'h0000000000004000, 64'h0000000000004004:
	  _theResult___fst__h5030 = crg_timecmp;
      64'h000000000000BFF8, 64'h000000000000BFFC:
	  _theResult___fst__h5030 = crg_time;
      default: _theResult___fst__h5030 = 64'd0;
    endcase
  end
  always@(byte_addr__h4837)
  begin
    case (byte_addr__h4837)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  CASE_byte_addr837_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q3 = 2'd0;
      default: CASE_byte_addr837_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q3 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	crg_time <= `BSV_ASSIGNMENT_DELAY 64'd1;
	crg_timecmp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (crg_time$EN) crg_time <= `BSV_ASSIGNMENT_DELAY crg_time$D_IN;
	if (crg_timecmp$EN)
	  crg_timecmp <= `BSV_ASSIGNMENT_DELAY crg_timecmp$D_IN;
	if (rg_mtip$EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (slave_xactor_clearing$EN)
	  slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_clearing$D_IN;
	if (slave_xactor_shim_arff_rv$EN)
	  slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_arff_rv$D_IN;
	if (slave_xactor_shim_awff_rv$EN)
	  slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_awff_rv$D_IN;
	if (slave_xactor_shim_bff_rv$EN)
	  slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_bff_rv$D_IN;
	if (slave_xactor_shim_rff_rv$EN)
	  slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_rff_rv$D_IN;
	if (slave_xactor_shim_wff_rv$EN)
	  slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_wff_rv$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_msip$EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    crg_time = 64'hAAAAAAAAAAAAAAAA;
    crg_timecmp = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_msip = 1'h0;
    rg_mtip = 1'h0;
    rg_state = 1'h0;
    slave_xactor_clearing = 1'h0;
    slave_xactor_shim_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_bff_rv = 8'hAA;
    slave_xactor_shim_rff_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_timer_interrupt_req_get &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h13099 = $stime;
	  #0;
	end
    v__h13093 = v__h13099 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_timer_interrupt_req_get &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4: get_timer_interrupt_req: %x",
		 v__h13093,
		 f_timer_interrupt_req$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_sw_interrupt_req_get &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h13231 = $stime;
	  #0;
	end
    v__h13225 = v__h13231 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_sw_interrupt_req_get &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4: get_sw_interrupt_req: %x",
		 v__h13225,
		 f_sw_interrupt_req$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	begin
	  v__h4164 = $stime;
	  #0;
	end
    v__h4158 = v__h4164 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	$display("%0d: Near_Mem_IO_AXI4.rl_reset", v__h4158);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h4672 = $stime;
	  #0;
	end
    v__h4666 = v__h4672 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_rd_req: rg_mtip = %0d",
		 v__h4666,
		 rg_mtip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_arff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	begin
	  v__h4886 = $stime;
	  #0;
	end
    v__h4880 = v__h4886 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_rd_req: unrecognized addr",
		 v__h4880);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  slave_xactor_shim_arff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  !slave_xactor_shim_arff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	begin
	  v__h5109 = $stime;
	  #0;
	end
    v__h5103 = v__h5109 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_rd_req: unrecognized addr",
		 v__h5103);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d149)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_arff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC) &&
	  !slave_xactor_shim_arff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h5435 = $stime;
	  #0;
	end
    v__h5429 = v__h5435 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_rd_req", v__h5429);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_arff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_arff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_arff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_arff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", x__h5248);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 &&
	  (byte_addr__h4837 == 64'h0 ||
	   byte_addr__h4837 == 64'h0000000000004000 ||
	   byte_addr__h4837 == 64'h000000000000BFF8 ||
	   byte_addr__h4837 == 64'h0000000000000004 ||
	   byte_addr__h4837 == 64'h0000000000004004 ||
	   byte_addr__h4837 == 64'h000000000000BFFC))
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  (slave_xactor_shim_arff_rv_port1__read__9_BITS__ETC___d116 ||
	   byte_addr__h4837 != 64'h0 &&
	   byte_addr__h4837 != 64'h0000000000004000 &&
	   byte_addr__h4837 != 64'h000000000000BFF8 &&
	   byte_addr__h4837 != 64'h0000000000000004 &&
	   byte_addr__h4837 != 64'h0000000000004004 &&
	   byte_addr__h4837 != 64'h000000000000BFFC))
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h4408 = $stime;
	  #0;
	end
    v__h4402 = v__h4408 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4.rl_compare: new MTIP = %0d, time = %0d, timecmp = %0d",
		 v__h4402,
		 NOT_crg_time_port0__read__8_ULT_crg_timecmp_po_ETC___d69,
		 crg_time,
		 crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h5925 = $stime;
	  #0;
	end
    v__h5919 = v__h5925 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO_AXI4.rl_process_wr_req: rg_mtip = %0d",
		 v__h5919,
		 rg_mtip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_awff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_wff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_wff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	begin
	  v__h6181 = $stime;
	  #0;
	end
    v__h6175 = v__h6181 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_wr_req: unrecognized addr",
		 v__h6175);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_awff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  !slave_xactor_shim_awff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  slave_xactor_shim_wff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  !slave_xactor_shim_wff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0 &&
	  !rg_msip_52_EQ_slave_xactor_shim_wff_rv_port1___ETC___d189 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("    new MSIP = %0d",
		 slave_xactor_shim_wff_rv$port1__read[9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("    Writing MTIMECMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        old MTIMECMP         = 0x%0h", crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIMECMP         = 0x%0h", new_timecmp__h6584);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        cur MTIME            = 0x%0h", old_time__h10432);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004000 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIMECMP - MTIME = 0x%0h",
		 crg_timecmp_port1__read__53_AND_INV_SEXT_slave_ETC___d292);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("    Writing MTIME");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        old MTIME = 0x%0h", old_time__h10432);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFF8 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIME = 0x%0h", new_time__h7873);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("    Writing MTIMECMP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        old MTIMECMP         = 0x%0h", crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIMECMP         = 0x%0h", new_timecmp__h6584);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        cur MTIME            = 0x%0h", old_time__h10432);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h0000000000004004 &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIMECMP - MTIME = 0x%0h",
		 crg_timecmp_port1__read__53_AND_INV_SEXT_slave_ETC___d292);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("    Writing MTIME");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        old MTIME = 0x%0h", old_time__h10432);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  byte_addr__h6142 == 64'h000000000000BFFC &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("        new MTIME = 0x%0h", new_time__h7873);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	begin
	  v__h11750 = $stime;
	  #0;
	end
    v__h11744 = v__h11750 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$display("%0d: ERROR: Near_Mem_IO_AXI4.rl_process_wr_req: unrecognized addr",
		 v__h11744);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d324)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_awff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  !slave_xactor_shim_awff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  slave_xactor_shim_wff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC) &&
	  !slave_xactor_shim_wff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	begin
	  v__h12059 = $stime;
	  #0;
	end
    v__h12053 = v__h12059 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$display("%0d: Near_Mem_IO.AXI4.rl_process_wr_req", v__h12053);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd0)
	$write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] == 2'd2)
	$write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd0 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd1 &&
	  slave_xactor_shim_awff_rv$port1__read[17:16] != 2'd2)
	$write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_awff_rv$port1__read[15])
	$write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_awff_rv$port1__read[15])
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[72:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_wff_rv$port1__read[8:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  slave_xactor_shim_wff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_wff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", slave_xactor_shim_awff_rv$port1__read[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  !slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 &&
	  (byte_addr__h6142 == 64'h0 ||
	   byte_addr__h6142 == 64'h0000000000004000 ||
	   byte_addr__h6142 == 64'h000000000000BFF8 ||
	   byte_addr__h6142 == 64'h0000000000000004 ||
	   byte_addr__h6142 == 64'h0000000000004004 ||
	   byte_addr__h6142 == 64'h000000000000BFFC))
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76 &&
	  (slave_xactor_shim_awff_rv_port1__read__76_BITS_ETC___d184 ||
	   byte_addr__h6142 != 64'h0 &&
	   byte_addr__h6142 != 64'h0000000000004000 &&
	   byte_addr__h6142 != 64'h000000000000BFF8 &&
	   byte_addr__h6142 != 64'h0000000000000004 &&
	   byte_addr__h6142 != 64'h0000000000004004 &&
	   byte_addr__h6142 != 64'h000000000000BFFC))
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read__2_ULE_1_5___d76)
	$write("\n");
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      begin
        v__h12451 = $stime;
	#0;
      end
    v__h12445 = v__h12451 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      $display("%0d: WARNING: Near_Mem_IO_AXI4.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
	       v__h12445,
	       set_addr_map_addr_base);
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      begin
        v__h12561 = $stime;
	#0;
      end
    v__h12555 = v__h12561 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      $display("%0d: WARNING: Near_Mem_IO_AXI4.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
	       v__h12555,
	       set_addr_map_addr_lim);
    if (EN_set_addr_map)
      begin
        v__h12668 = $stime;
	#0;
      end
    v__h12662 = v__h12668 / 32'd10;
    if (EN_set_addr_map)
      $display("%0d: Near_Mem_IO_AXI4.set_addr_map: addr_base 0x%0h addr_lim 0x%0h",
	       v__h12662,
	       set_addr_map_addr_base,
	       set_addr_map_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkNear_Mem_IO_AXI4

