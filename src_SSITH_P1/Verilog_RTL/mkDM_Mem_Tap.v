//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jul  9 16:18:32 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// slave_awready                  O     1
// slave_wready                   O     1
// slave_bid                      O     4
// slave_bresp                    O     2
// slave_bvalid                   O     1
// slave_arready                  O     1
// slave_rid                      O     4
// slave_rdata                    O    64
// slave_rresp                    O     2
// slave_rlast                    O     1
// slave_rvalid                   O     1
// master_awid                    O     4
// master_awaddr                  O    64
// master_awlen                   O     8
// master_awsize                  O     3
// master_awburst                 O     2
// master_awlock                  O     1
// master_awcache                 O     4
// master_awprot                  O     3
// master_awqos                   O     4
// master_awregion                O     4
// master_awvalid                 O     1
// master_wdata                   O    64
// master_wstrb                   O     8
// master_wlast                   O     1
// master_wvalid                  O     1
// master_bready                  O     1
// master_arid                    O     4
// master_araddr                  O    64
// master_arlen                   O     8
// master_arsize                  O     3
// master_arburst                 O     2
// master_arlock                  O     1
// master_arcache                 O     4
// master_arprot                  O     3
// master_arqos                   O     4
// master_arregion                O     4
// master_arvalid                 O     1
// master_rready                  O     1
// trace_data_out_get             O   234 reg
// RDY_trace_data_out_get         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_awid                     I     4
// slave_awaddr                   I    64
// slave_awlen                    I     8
// slave_awsize                   I     3
// slave_awburst                  I     2
// slave_awlock                   I     1
// slave_awcache                  I     4
// slave_awprot                   I     3
// slave_awqos                    I     4
// slave_awregion                 I     4
// slave_wdata                    I    64
// slave_wstrb                    I     8
// slave_wlast                    I     1
// slave_bready                   I     1
// slave_arid                     I     4
// slave_araddr                   I    64
// slave_arlen                    I     8
// slave_arsize                   I     3
// slave_arburst                  I     2
// slave_arlock                   I     1
// slave_arcache                  I     4
// slave_arprot                   I     3
// slave_arqos                    I     4
// slave_arregion                 I     4
// slave_rready                   I     1
// master_awready                 I     1
// master_wready                  I     1
// master_bid                     I     4
// master_bresp                   I     2
// master_arready                 I     1
// master_rid                     I     4
// master_rdata                   I    64
// master_rresp                   I     2
// master_rlast                   I     1
// slave_awvalid                  I     1
// slave_wvalid                   I     1
// slave_arvalid                  I     1
// master_bvalid                  I     1
// master_rvalid                  I     1
// EN_trace_data_out_get          I     1
//
// Combinational paths from inputs to outputs:
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awid
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awaddr
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awlen
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awsize
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awburst
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awlock
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awcache
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awprot
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awqos
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awregion
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awuser
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_awvalid
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_wdata
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_wstrb
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_wlast
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_wuser
//   (slave_awid,
//    slave_awaddr,
//    slave_awlen,
//    slave_awsize,
//    slave_awburst,
//    slave_awlock,
//    slave_awcache,
//    slave_awprot,
//    slave_awqos,
//    slave_awregion,
//    slave_wdata,
//    slave_wstrb,
//    slave_wlast,
//    slave_awvalid,
//    slave_wvalid) -> master_wvalid
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arid
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_araddr
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arlen
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arsize
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arburst
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arlock
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arcache
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arprot
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arqos
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arregion
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_aruser
//   (slave_arid,
//    slave_araddr,
//    slave_arlen,
//    slave_arsize,
//    slave_arburst,
//    slave_arlock,
//    slave_arcache,
//    slave_arprot,
//    slave_arqos,
//    slave_arregion,
//    slave_arvalid) -> master_arvalid
//   (master_bid, master_bresp, master_bvalid) -> slave_bid
//   (master_bid, master_bresp, master_bvalid) -> slave_bresp
//   (master_bid, master_bresp, master_bvalid) -> slave_buser
//   (master_bid, master_bresp, master_bvalid) -> slave_bvalid
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_rid
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_rdata
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_rresp
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_rlast
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_ruser
//   (master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_rvalid) -> slave_rvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDM_Mem_Tap(CLK,
		    RST_N,

		    slave_awid,
		    slave_awaddr,
		    slave_awlen,
		    slave_awsize,
		    slave_awburst,
		    slave_awlock,
		    slave_awcache,
		    slave_awprot,
		    slave_awqos,
		    slave_awregion,
		    slave_awvalid,

		    slave_awready,

		    slave_wdata,
		    slave_wstrb,
		    slave_wlast,
		    slave_wvalid,

		    slave_wready,

		    slave_bid,

		    slave_bresp,

		    slave_bvalid,

		    slave_bready,

		    slave_arid,
		    slave_araddr,
		    slave_arlen,
		    slave_arsize,
		    slave_arburst,
		    slave_arlock,
		    slave_arcache,
		    slave_arprot,
		    slave_arqos,
		    slave_arregion,
		    slave_arvalid,

		    slave_arready,

		    slave_rid,

		    slave_rdata,

		    slave_rresp,

		    slave_rlast,

		    slave_rvalid,

		    slave_rready,

		    master_awid,

		    master_awaddr,

		    master_awlen,

		    master_awsize,

		    master_awburst,

		    master_awlock,

		    master_awcache,

		    master_awprot,

		    master_awqos,

		    master_awregion,

		    master_awvalid,

		    master_awready,

		    master_wdata,

		    master_wstrb,

		    master_wlast,

		    master_wvalid,

		    master_wready,

		    master_bid,
		    master_bresp,
		    master_bvalid,

		    master_bready,

		    master_arid,

		    master_araddr,

		    master_arlen,

		    master_arsize,

		    master_arburst,

		    master_arlock,

		    master_arcache,

		    master_arprot,

		    master_arqos,

		    master_arregion,

		    master_arvalid,

		    master_arready,

		    master_rid,
		    master_rdata,
		    master_rresp,
		    master_rlast,
		    master_rvalid,

		    master_rready,

		    EN_trace_data_out_get,
		    trace_data_out_get,
		    RDY_trace_data_out_get);
  input  CLK;
  input  RST_N;

  // action method slave_aw_awflit
  input  [3 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;
  input  slave_awvalid;

  // value method slave_aw_awready
  output slave_awready;

  // action method slave_w_wflit
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;
  input  slave_wvalid;

  // value method slave_w_wready
  output slave_wready;

  // value method slave_b_bid
  output [3 : 0] slave_bid;

  // value method slave_b_bresp
  output [1 : 0] slave_bresp;

  // value method slave_b_buser

  // value method slave_b_bvalid
  output slave_bvalid;

  // action method slave_b_bready
  input  slave_bready;

  // action method slave_ar_arflit
  input  [3 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;
  input  slave_arvalid;

  // value method slave_ar_arready
  output slave_arready;

  // value method slave_r_rid
  output [3 : 0] slave_rid;

  // value method slave_r_rdata
  output [63 : 0] slave_rdata;

  // value method slave_r_rresp
  output [1 : 0] slave_rresp;

  // value method slave_r_rlast
  output slave_rlast;

  // value method slave_r_ruser

  // value method slave_r_rvalid
  output slave_rvalid;

  // action method slave_r_rready
  input  slave_rready;

  // value method master_aw_awid
  output [3 : 0] master_awid;

  // value method master_aw_awaddr
  output [63 : 0] master_awaddr;

  // value method master_aw_awlen
  output [7 : 0] master_awlen;

  // value method master_aw_awsize
  output [2 : 0] master_awsize;

  // value method master_aw_awburst
  output [1 : 0] master_awburst;

  // value method master_aw_awlock
  output master_awlock;

  // value method master_aw_awcache
  output [3 : 0] master_awcache;

  // value method master_aw_awprot
  output [2 : 0] master_awprot;

  // value method master_aw_awqos
  output [3 : 0] master_awqos;

  // value method master_aw_awregion
  output [3 : 0] master_awregion;

  // value method master_aw_awuser

  // value method master_aw_awvalid
  output master_awvalid;

  // action method master_aw_awready
  input  master_awready;

  // value method master_w_wdata
  output [63 : 0] master_wdata;

  // value method master_w_wstrb
  output [7 : 0] master_wstrb;

  // value method master_w_wlast
  output master_wlast;

  // value method master_w_wuser

  // value method master_w_wvalid
  output master_wvalid;

  // action method master_w_wready
  input  master_wready;

  // action method master_b_bflit
  input  [3 : 0] master_bid;
  input  [1 : 0] master_bresp;
  input  master_bvalid;

  // value method master_b_bready
  output master_bready;

  // value method master_ar_arid
  output [3 : 0] master_arid;

  // value method master_ar_araddr
  output [63 : 0] master_araddr;

  // value method master_ar_arlen
  output [7 : 0] master_arlen;

  // value method master_ar_arsize
  output [2 : 0] master_arsize;

  // value method master_ar_arburst
  output [1 : 0] master_arburst;

  // value method master_ar_arlock
  output master_arlock;

  // value method master_ar_arcache
  output [3 : 0] master_arcache;

  // value method master_ar_arprot
  output [2 : 0] master_arprot;

  // value method master_ar_arqos
  output [3 : 0] master_arqos;

  // value method master_ar_arregion
  output [3 : 0] master_arregion;

  // value method master_ar_aruser

  // value method master_ar_arvalid
  output master_arvalid;

  // action method master_ar_arready
  input  master_arready;

  // action method master_r_rflit
  input  [3 : 0] master_rid;
  input  [63 : 0] master_rdata;
  input  [1 : 0] master_rresp;
  input  master_rlast;
  input  master_rvalid;

  // value method master_r_rready
  output master_rready;

  // actionvalue method trace_data_out_get
  input  EN_trace_data_out_get;
  output [233 : 0] trace_data_out_get;
  output RDY_trace_data_out_get;

  // signals for module outputs
  wire [233 : 0] trace_data_out_get;
  wire [63 : 0] master_araddr, master_awaddr, master_wdata, slave_rdata;
  wire [7 : 0] master_arlen, master_awlen, master_wstrb;
  wire [3 : 0] master_arcache,
	       master_arid,
	       master_arqos,
	       master_arregion,
	       master_awcache,
	       master_awid,
	       master_awqos,
	       master_awregion,
	       slave_bid,
	       slave_rid;
  wire [2 : 0] master_arprot, master_arsize, master_awprot, master_awsize;
  wire [1 : 0] master_arburst, master_awburst, slave_bresp, slave_rresp;
  wire RDY_trace_data_out_get,
       master_arlock,
       master_arvalid,
       master_awlock,
       master_awvalid,
       master_bready,
       master_rready,
       master_wlast,
       master_wvalid,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_rvalid,
       slave_wready;

  // inlined wires
  wire [97 : 0] master_xactor_shim_arff_rv$port0__write_1,
		master_xactor_shim_arff_rv$port1__read,
		master_xactor_shim_arff_rv$port2__read,
		master_xactor_shim_arff_rv$port3__read,
		master_xactor_shim_awff_rv$port0__write_1,
		master_xactor_shim_awff_rv$port1__read,
		master_xactor_shim_awff_rv$port2__read,
		master_xactor_shim_awff_rv$port3__read,
		slave_xactor_shim_arff_rv$port0__write_1,
		slave_xactor_shim_arff_rv$port1__read,
		slave_xactor_shim_arff_rv$port2__read,
		slave_xactor_shim_arff_rv$port3__read,
		slave_xactor_shim_awff_rv$port0__write_1,
		slave_xactor_shim_awff_rv$port1__read,
		slave_xactor_shim_awff_rv$port2__read,
		slave_xactor_shim_awff_rv$port3__read;
  wire [96 : 0] slave_xactor_ug_slave_u_ar_putWire$wget,
		slave_xactor_ug_slave_u_aw_putWire$wget;
  wire [73 : 0] master_xactor_shim_wff_rv$port0__write_1,
		master_xactor_shim_wff_rv$port1__read,
		master_xactor_shim_wff_rv$port2__read,
		master_xactor_shim_wff_rv$port3__read,
		slave_xactor_shim_wff_rv$port0__write_1,
		slave_xactor_shim_wff_rv$port1__read,
		slave_xactor_shim_wff_rv$port2__read,
		slave_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] slave_xactor_ug_slave_u_w_putWire$wget;
  wire [71 : 0] master_xactor_shim_rff_rv$port0__write_1,
		master_xactor_shim_rff_rv$port1__read,
		master_xactor_shim_rff_rv$port2__read,
		master_xactor_shim_rff_rv$port3__read,
		slave_xactor_shim_rff_rv$port0__write_1,
		slave_xactor_shim_rff_rv$port1__read,
		slave_xactor_shim_rff_rv$port2__read,
		slave_xactor_shim_rff_rv$port3__read;
  wire [70 : 0] master_xactor_ug_master_u_r_putWire$wget,
		slave_xactor_ug_slave_u_r_peekWire$wget;
  wire [6 : 0] master_xactor_shim_bff_rv$port0__write_1,
	       master_xactor_shim_bff_rv$port1__read,
	       master_xactor_shim_bff_rv$port2__read,
	       master_xactor_shim_bff_rv$port3__read,
	       slave_xactor_shim_bff_rv$port0__write_1,
	       slave_xactor_shim_bff_rv$port1__read,
	       slave_xactor_shim_bff_rv$port2__read,
	       slave_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] master_xactor_ug_master_u_b_putWire$wget,
	       slave_xactor_ug_slave_u_b_peekWire$wget;
  wire master_xactor_ug_master_u_ar_dropWire$whas,
       master_xactor_ug_master_u_aw_dropWire$whas,
       master_xactor_ug_master_u_b_putWire$whas,
       master_xactor_ug_master_u_r_putWire$whas,
       master_xactor_ug_master_u_w_dropWire$whas,
       slave_xactor_shim_arff_rv$EN_port1__write,
       slave_xactor_shim_awff_rv$EN_port1__write,
       slave_xactor_shim_bff_rv$EN_port0__write,
       slave_xactor_shim_rff_rv$EN_port0__write,
       slave_xactor_shim_wff_rv$EN_port1__write,
       slave_xactor_ug_slave_u_ar_putWire$whas,
       slave_xactor_ug_slave_u_aw_putWire$whas,
       slave_xactor_ug_slave_u_b_dropWire$whas,
       slave_xactor_ug_slave_u_r_dropWire$whas,
       slave_xactor_ug_slave_u_w_putWire$whas;

  // register master_xactor_clearing
  reg master_xactor_clearing;
  wire master_xactor_clearing$D_IN, master_xactor_clearing$EN;

  // register master_xactor_shim_arff_rv
  reg [97 : 0] master_xactor_shim_arff_rv;
  wire [97 : 0] master_xactor_shim_arff_rv$D_IN;
  wire master_xactor_shim_arff_rv$EN;

  // register master_xactor_shim_awff_rv
  reg [97 : 0] master_xactor_shim_awff_rv;
  wire [97 : 0] master_xactor_shim_awff_rv$D_IN;
  wire master_xactor_shim_awff_rv$EN;

  // register master_xactor_shim_bff_rv
  reg [6 : 0] master_xactor_shim_bff_rv;
  wire [6 : 0] master_xactor_shim_bff_rv$D_IN;
  wire master_xactor_shim_bff_rv$EN;

  // register master_xactor_shim_rff_rv
  reg [71 : 0] master_xactor_shim_rff_rv;
  wire [71 : 0] master_xactor_shim_rff_rv$D_IN;
  wire master_xactor_shim_rff_rv$EN;

  // register master_xactor_shim_wff_rv
  reg [73 : 0] master_xactor_shim_wff_rv;
  wire [73 : 0] master_xactor_shim_wff_rv$D_IN;
  wire master_xactor_shim_wff_rv$EN;

  // register slave_xactor_clearing
  reg slave_xactor_clearing;
  wire slave_xactor_clearing$D_IN, slave_xactor_clearing$EN;

  // register slave_xactor_shim_arff_rv
  reg [97 : 0] slave_xactor_shim_arff_rv;
  wire [97 : 0] slave_xactor_shim_arff_rv$D_IN;
  wire slave_xactor_shim_arff_rv$EN;

  // register slave_xactor_shim_awff_rv
  reg [97 : 0] slave_xactor_shim_awff_rv;
  wire [97 : 0] slave_xactor_shim_awff_rv$D_IN;
  wire slave_xactor_shim_awff_rv$EN;

  // register slave_xactor_shim_bff_rv
  reg [6 : 0] slave_xactor_shim_bff_rv;
  wire [6 : 0] slave_xactor_shim_bff_rv$D_IN;
  wire slave_xactor_shim_bff_rv$EN;

  // register slave_xactor_shim_rff_rv
  reg [71 : 0] slave_xactor_shim_rff_rv;
  wire [71 : 0] slave_xactor_shim_rff_rv$D_IN;
  wire slave_xactor_shim_rff_rv$EN;

  // register slave_xactor_shim_wff_rv
  reg [73 : 0] slave_xactor_shim_wff_rv;
  wire [73 : 0] slave_xactor_shim_wff_rv$D_IN;
  wire slave_xactor_shim_wff_rv$EN;

  // ports of submodule f_trace_data
  wire [233 : 0] f_trace_data$D_IN, f_trace_data$D_OUT;
  wire f_trace_data$CLR,
       f_trace_data$DEQ,
       f_trace_data$EMPTY_N,
       f_trace_data$ENQ,
       f_trace_data$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_master_xactor_do_clear,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_slave_xactor_do_clear,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_write_reqs,
       CAN_FIRE_master_ar_arready,
       CAN_FIRE_master_aw_awready,
       CAN_FIRE_master_b_bflit,
       CAN_FIRE_master_r_rflit,
       CAN_FIRE_master_w_wready,
       CAN_FIRE_slave_ar_arflit,
       CAN_FIRE_slave_aw_awflit,
       CAN_FIRE_slave_b_bready,
       CAN_FIRE_slave_r_rready,
       CAN_FIRE_slave_w_wflit,
       CAN_FIRE_trace_data_out_get,
       WILL_FIRE_RL_master_xactor_do_clear,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_slave_xactor_do_clear,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_write_reqs,
       WILL_FIRE_master_ar_arready,
       WILL_FIRE_master_aw_awready,
       WILL_FIRE_master_b_bflit,
       WILL_FIRE_master_r_rflit,
       WILL_FIRE_master_w_wready,
       WILL_FIRE_slave_ar_arflit,
       WILL_FIRE_slave_aw_awflit,
       WILL_FIRE_slave_b_bready,
       WILL_FIRE_slave_r_rready,
       WILL_FIRE_slave_w_wflit,
       WILL_FIRE_trace_data_out_get;

  // remaining internal signals
  wire [96 : 0] master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3,
		master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1;
  wire [72 : 0] master_xactor_shim_wff_rvport1__read_BITS_72__ETC__q2;
  wire [63 : 0] stval___1__h6721, x__h6719, y_avValue_fst__h6631;
  wire slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97;

  // action method slave_aw_awflit
  assign CAN_FIRE_slave_aw_awflit = 1'd1 ;
  assign WILL_FIRE_slave_aw_awflit = slave_awvalid ;

  // value method slave_aw_awready
  assign slave_awready = !slave_xactor_shim_awff_rv[97] ;

  // action method slave_w_wflit
  assign CAN_FIRE_slave_w_wflit = 1'd1 ;
  assign WILL_FIRE_slave_w_wflit = slave_wvalid ;

  // value method slave_w_wready
  assign slave_wready = !slave_xactor_shim_wff_rv[73] ;

  // value method slave_b_bid
  assign slave_bid = slave_xactor_ug_slave_u_b_peekWire$wget[5:2] ;

  // value method slave_b_bresp
  assign slave_bresp = slave_xactor_ug_slave_u_b_peekWire$wget[1:0] ;

  // value method slave_b_bvalid
  assign slave_bvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // action method slave_b_bready
  assign CAN_FIRE_slave_b_bready = 1'd1 ;
  assign WILL_FIRE_slave_b_bready = 1'd1 ;

  // action method slave_ar_arflit
  assign CAN_FIRE_slave_ar_arflit = 1'd1 ;
  assign WILL_FIRE_slave_ar_arflit = slave_arvalid ;

  // value method slave_ar_arready
  assign slave_arready = !slave_xactor_shim_arff_rv[97] ;

  // value method slave_r_rid
  assign slave_rid = slave_xactor_ug_slave_u_r_peekWire$wget[70:67] ;

  // value method slave_r_rdata
  assign slave_rdata = slave_xactor_ug_slave_u_r_peekWire$wget[66:3] ;

  // value method slave_r_rresp
  assign slave_rresp = slave_xactor_ug_slave_u_r_peekWire$wget[2:1] ;

  // value method slave_r_rlast
  assign slave_rlast = slave_xactor_ug_slave_u_r_peekWire$wget[0] ;

  // value method slave_r_rvalid
  assign slave_rvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // action method slave_r_rready
  assign CAN_FIRE_slave_r_rready = 1'd1 ;
  assign WILL_FIRE_slave_r_rready = 1'd1 ;

  // value method master_aw_awid
  assign master_awid =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[96:93] ;

  // value method master_aw_awaddr
  assign master_awaddr =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[92:29] ;

  // value method master_aw_awlen
  assign master_awlen =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[28:21] ;

  // value method master_aw_awsize
  assign master_awsize =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[20:18] ;

  // value method master_aw_awburst
  assign master_awburst =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[17:16] ;

  // value method master_aw_awlock
  assign master_awlock =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[15] ;

  // value method master_aw_awcache
  assign master_awcache =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[14:11] ;

  // value method master_aw_awprot
  assign master_awprot =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[10:8] ;

  // value method master_aw_awqos
  assign master_awqos =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[7:4] ;

  // value method master_aw_awregion
  assign master_awregion =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1[3:0] ;

  // value method master_aw_awvalid
  assign master_awvalid = CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek ;

  // action method master_aw_awready
  assign CAN_FIRE_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_master_aw_awready = 1'd1 ;

  // value method master_w_wdata
  assign master_wdata =
	     master_xactor_shim_wff_rvport1__read_BITS_72__ETC__q2[72:9] ;

  // value method master_w_wstrb
  assign master_wstrb =
	     master_xactor_shim_wff_rvport1__read_BITS_72__ETC__q2[8:1] ;

  // value method master_w_wlast
  assign master_wlast =
	     master_xactor_shim_wff_rvport1__read_BITS_72__ETC__q2[0] ;

  // value method master_w_wvalid
  assign master_wvalid = CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek ;

  // action method master_w_wready
  assign CAN_FIRE_master_w_wready = 1'd1 ;
  assign WILL_FIRE_master_w_wready = 1'd1 ;

  // action method master_b_bflit
  assign CAN_FIRE_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_master_b_bflit = master_bvalid ;

  // value method master_b_bready
  assign master_bready = !master_xactor_shim_bff_rv[6] ;

  // value method master_ar_arid
  assign master_arid =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[96:93] ;

  // value method master_ar_araddr
  assign master_araddr =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[92:29] ;

  // value method master_ar_arlen
  assign master_arlen =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[28:21] ;

  // value method master_ar_arsize
  assign master_arsize =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[20:18] ;

  // value method master_ar_arburst
  assign master_arburst =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[17:16] ;

  // value method master_ar_arlock
  assign master_arlock =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[15] ;

  // value method master_ar_arcache
  assign master_arcache =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[14:11] ;

  // value method master_ar_arprot
  assign master_arprot =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[10:8] ;

  // value method master_ar_arqos
  assign master_arqos =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[7:4] ;

  // value method master_ar_arregion
  assign master_arregion =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3[3:0] ;

  // value method master_ar_arvalid
  assign master_arvalid = CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek ;

  // action method master_ar_arready
  assign CAN_FIRE_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_master_ar_arready = 1'd1 ;

  // action method master_r_rflit
  assign CAN_FIRE_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_master_r_rflit = master_rvalid ;

  // value method master_r_rready
  assign master_rready = !master_xactor_shim_rff_rv[71] ;

  // actionvalue method trace_data_out_get
  assign trace_data_out_get = f_trace_data$D_OUT ;
  assign RDY_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign CAN_FIRE_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign WILL_FIRE_trace_data_out_get = EN_trace_data_out_get ;

  // submodule f_trace_data
  FIFO2 #(.width(32'd234), .guarded(32'd1)) f_trace_data(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_trace_data$D_IN),
							 .ENQ(f_trace_data$ENQ),
							 .DEQ(f_trace_data$DEQ),
							 .CLR(f_trace_data$CLR),
							 .D_OUT(f_trace_data$D_OUT),
							 .FULL_N(f_trace_data$FULL_N),
							 .EMPTY_N(f_trace_data$EMPTY_N));

  // rule RL_slave_xactor_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     slave_xactor_ug_slave_u_aw_putWire$whas &&
	     slave_xactor_shim_awff_rv[97] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     !slave_xactor_shim_awff_rv[97] &&
	     slave_xactor_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ;

  // rule RL_slave_xactor_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     slave_xactor_ug_slave_u_w_putWire$whas &&
	     slave_xactor_shim_wff_rv[73] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     !slave_xactor_shim_wff_rv[73] &&
	     slave_xactor_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ;

  // rule RL_write_reqs
  assign CAN_FIRE_RL_write_reqs =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[97] &&
	     slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97 ;
  assign WILL_FIRE_RL_write_reqs = CAN_FIRE_RL_write_reqs ;

  // rule RL_slave_xactor_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     slave_xactor_ug_slave_u_ar_putWire$whas &&
	     slave_xactor_shim_arff_rv[97] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     !slave_xactor_shim_arff_rv[97] &&
	     slave_xactor_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_arff_rv$port1__read[97] &&
	     !master_xactor_shim_arff_rv[97] ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek =
	     master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop =
	     master_xactor_ug_master_u_aw_dropWire$whas &&
	     !master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop =
	     master_xactor_shim_awff_rv$port1__read[97] &&
	     master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek =
	     master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop =
	     master_xactor_ug_master_u_w_dropWire$whas &&
	     !master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop =
	     master_xactor_shim_wff_rv$port1__read[73] &&
	     master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut =
	     master_xactor_ug_master_u_b_putWire$whas &&
	     master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut =
	     !master_xactor_shim_bff_rv[6] &&
	     master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     master_xactor_shim_bff_rv$port1__read[6] &&
	     !slave_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_slave_xactor_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     slave_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     slave_xactor_ug_slave_u_b_dropWire$whas &&
	     !slave_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     slave_xactor_shim_bff_rv$port1__read[6] &&
	     slave_xactor_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ;

  // rule RL_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek =
	     master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop =
	     master_xactor_ug_master_u_ar_dropWire$whas &&
	     !master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop =
	     master_xactor_shim_arff_rv$port1__read[97] &&
	     master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut =
	     master_xactor_ug_master_u_r_putWire$whas &&
	     master_xactor_shim_rff_rv[71] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut =
	     !master_xactor_shim_rff_rv[71] &&
	     master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     master_xactor_shim_rff_rv$port1__read[71] &&
	     !slave_xactor_shim_rff_rv[71] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_slave_xactor_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     slave_xactor_shim_rff_rv$port1__read[71] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     slave_xactor_ug_slave_u_r_dropWire$whas &&
	     !slave_xactor_shim_rff_rv$port1__read[71] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     slave_xactor_shim_rff_rv$port1__read[71] &&
	     slave_xactor_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ;

  // rule RL_slave_xactor_do_clear
  assign CAN_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;
  assign WILL_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;

  // rule RL_master_xactor_do_clear
  assign CAN_FIRE_RL_master_xactor_do_clear = master_xactor_clearing ;
  assign WILL_FIRE_RL_master_xactor_do_clear = master_xactor_clearing ;

  // inlined wires
  assign slave_xactor_ug_slave_u_aw_putWire$wget =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_ug_slave_u_aw_putWire$whas =
	     slave_awvalid && !slave_xactor_shim_awff_rv[97] ;
  assign slave_xactor_ug_slave_u_w_putWire$wget =
	     { slave_wdata, slave_wstrb, slave_wlast } ;
  assign slave_xactor_ug_slave_u_w_putWire$whas =
	     slave_wvalid && !slave_xactor_shim_wff_rv[73] ;
  assign slave_xactor_ug_slave_u_b_peekWire$wget =
	     slave_xactor_shim_bff_rv$port1__read[5:0] ;
  assign slave_xactor_ug_slave_u_ar_putWire$wget =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_ug_slave_u_ar_putWire$whas =
	     slave_arvalid && !slave_xactor_shim_arff_rv[97] ;
  assign slave_xactor_ug_slave_u_r_peekWire$wget =
	     slave_xactor_shim_rff_rv$port1__read[70:0] ;
  assign master_xactor_ug_master_u_b_putWire$wget =
	     { master_bid, master_bresp } ;
  assign master_xactor_ug_master_u_b_putWire$whas =
	     master_bvalid && !master_xactor_shim_bff_rv[6] ;
  assign master_xactor_ug_master_u_r_putWire$wget =
	     { master_rid, master_rdata, master_rresp, master_rlast } ;
  assign master_xactor_ug_master_u_r_putWire$whas =
	     master_rvalid && !master_xactor_shim_rff_rv[71] ;
  assign slave_xactor_ug_slave_u_b_dropWire$whas =
	     slave_xactor_shim_bff_rv$port1__read[6] && slave_bready ;
  assign slave_xactor_ug_slave_u_r_dropWire$whas =
	     slave_xactor_shim_rff_rv$port1__read[71] && slave_rready ;
  assign master_xactor_ug_master_u_aw_dropWire$whas =
	     master_xactor_shim_awff_rv$port1__read[97] && master_awready ;
  assign master_xactor_ug_master_u_w_dropWire$whas =
	     master_xactor_shim_wff_rv$port1__read[73] && master_wready ;
  assign master_xactor_ug_master_u_ar_dropWire$whas =
	     master_xactor_shim_arff_rv$port1__read[97] && master_arready ;
  assign slave_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_aw_putWire$wget } ;
  assign slave_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ?
	       slave_xactor_shim_awff_rv$port0__write_1 :
	       slave_xactor_shim_awff_rv ;
  assign slave_xactor_shim_awff_rv$EN_port1__write =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[97] &&
	     slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97 ;
  assign slave_xactor_shim_awff_rv$port2__read =
	     slave_xactor_shim_awff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port1__read ;
  assign slave_xactor_shim_awff_rv$port3__read =
	     slave_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port2__read ;
  assign slave_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_w_putWire$wget } ;
  assign slave_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ?
	       slave_xactor_shim_wff_rv$port0__write_1 :
	       slave_xactor_shim_wff_rv ;
  assign slave_xactor_shim_wff_rv$EN_port1__write =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[97] &&
	     slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97 ;
  assign slave_xactor_shim_wff_rv$port2__read =
	     slave_xactor_shim_wff_rv$EN_port1__write ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port1__read ;
  assign slave_xactor_shim_wff_rv$port3__read =
	     slave_xactor_clearing ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port2__read ;
  assign slave_xactor_shim_bff_rv$EN_port0__write =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     master_xactor_shim_bff_rv$port1__read[6] &&
	     !slave_xactor_shim_bff_rv[6] ;
  assign slave_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, master_xactor_shim_bff_rv$port1__read[5:0] } ;
  assign slave_xactor_shim_bff_rv$port1__read =
	     slave_xactor_shim_bff_rv$EN_port0__write ?
	       slave_xactor_shim_bff_rv$port0__write_1 :
	       slave_xactor_shim_bff_rv ;
  assign slave_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ?
	       7'd42 :
	       slave_xactor_shim_bff_rv$port1__read ;
  assign slave_xactor_shim_bff_rv$port3__read =
	     slave_xactor_clearing ?
	       7'd42 :
	       slave_xactor_shim_bff_rv$port2__read ;
  assign slave_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_ar_putWire$wget } ;
  assign slave_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ?
	       slave_xactor_shim_arff_rv$port0__write_1 :
	       slave_xactor_shim_arff_rv ;
  assign slave_xactor_shim_arff_rv$EN_port1__write =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_arff_rv$port1__read[97] &&
	     !master_xactor_shim_arff_rv[97] ;
  assign slave_xactor_shim_arff_rv$port2__read =
	     slave_xactor_shim_arff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port1__read ;
  assign slave_xactor_shim_arff_rv$port3__read =
	     slave_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port2__read ;
  assign slave_xactor_shim_rff_rv$EN_port0__write =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     master_xactor_shim_rff_rv$port1__read[71] &&
	     !slave_xactor_shim_rff_rv[71] ;
  assign slave_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, master_xactor_shim_rff_rv$port1__read[70:0] } ;
  assign slave_xactor_shim_rff_rv$port1__read =
	     slave_xactor_shim_rff_rv$EN_port0__write ?
	       slave_xactor_shim_rff_rv$port0__write_1 :
	       slave_xactor_shim_rff_rv ;
  assign slave_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port1__read ;
  assign slave_xactor_shim_rff_rv$port3__read =
	     slave_xactor_clearing ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port2__read ;
  assign master_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_shim_awff_rv$port1__read[96:0] } ;
  assign master_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_write_reqs ?
	       master_xactor_shim_awff_rv$port0__write_1 :
	       master_xactor_shim_awff_rv ;
  assign master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_awff_rv$port1__read ;
  assign master_xactor_shim_awff_rv$port3__read =
	     master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_awff_rv$port2__read ;
  assign master_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_shim_wff_rv$port1__read[72:0] } ;
  assign master_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_write_reqs ?
	       master_xactor_shim_wff_rv$port0__write_1 :
	       master_xactor_shim_wff_rv ;
  assign master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_wff_rv$port1__read ;
  assign master_xactor_shim_wff_rv$port3__read =
	     master_xactor_clearing ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_wff_rv$port2__read ;
  assign master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, master_xactor_ug_master_u_b_putWire$wget } ;
  assign master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut ?
	       master_xactor_shim_bff_rv$port0__write_1 :
	       master_xactor_shim_bff_rv ;
  assign master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ?
	       7'd42 :
	       master_xactor_shim_bff_rv$port1__read ;
  assign master_xactor_shim_bff_rv$port3__read =
	     master_xactor_clearing ?
	       7'd42 :
	       master_xactor_shim_bff_rv$port2__read ;
  assign master_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_shim_arff_rv$port1__read[96:0] } ;
  assign master_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut ?
	       master_xactor_shim_arff_rv$port0__write_1 :
	       master_xactor_shim_arff_rv ;
  assign master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_arff_rv$port1__read ;
  assign master_xactor_shim_arff_rv$port3__read =
	     master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_arff_rv$port2__read ;
  assign master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, master_xactor_ug_master_u_r_putWire$wget } ;
  assign master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut ?
	       master_xactor_shim_rff_rv$port0__write_1 :
	       master_xactor_shim_rff_rv ;
  assign master_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       master_xactor_shim_rff_rv$port1__read ;
  assign master_xactor_shim_rff_rv$port3__read =
	     master_xactor_clearing ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       master_xactor_shim_rff_rv$port2__read ;

  // register master_xactor_clearing
  assign master_xactor_clearing$D_IN = 1'd0 ;
  assign master_xactor_clearing$EN = master_xactor_clearing ;

  // register master_xactor_shim_arff_rv
  assign master_xactor_shim_arff_rv$D_IN =
	     master_xactor_shim_arff_rv$port3__read ;
  assign master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register master_xactor_shim_awff_rv
  assign master_xactor_shim_awff_rv$D_IN =
	     master_xactor_shim_awff_rv$port3__read ;
  assign master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register master_xactor_shim_bff_rv
  assign master_xactor_shim_bff_rv$D_IN =
	     master_xactor_shim_bff_rv$port3__read ;
  assign master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register master_xactor_shim_rff_rv
  assign master_xactor_shim_rff_rv$D_IN =
	     master_xactor_shim_rff_rv$port3__read ;
  assign master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register master_xactor_shim_wff_rv
  assign master_xactor_shim_wff_rv$D_IN =
	     master_xactor_shim_wff_rv$port3__read ;
  assign master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register slave_xactor_clearing
  assign slave_xactor_clearing$D_IN = 1'd0 ;
  assign slave_xactor_clearing$EN = slave_xactor_clearing ;

  // register slave_xactor_shim_arff_rv
  assign slave_xactor_shim_arff_rv$D_IN =
	     slave_xactor_shim_arff_rv$port3__read ;
  assign slave_xactor_shim_arff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_awff_rv
  assign slave_xactor_shim_awff_rv$D_IN =
	     slave_xactor_shim_awff_rv$port3__read ;
  assign slave_xactor_shim_awff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_bff_rv
  assign slave_xactor_shim_bff_rv$D_IN =
	     slave_xactor_shim_bff_rv$port3__read ;
  assign slave_xactor_shim_bff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_rff_rv
  assign slave_xactor_shim_rff_rv$D_IN =
	     slave_xactor_shim_rff_rv$port3__read ;
  assign slave_xactor_shim_rff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_wff_rv
  assign slave_xactor_shim_wff_rv$D_IN =
	     slave_xactor_shim_wff_rv$port3__read ;
  assign slave_xactor_shim_wff_rv$EN = 1'b1 ;

  // submodule f_trace_data
  assign f_trace_data$D_IN =
	     { 106'h12AAAAAAA955555554A00000002,
	       x__h6719[31:0],
	       slave_xactor_shim_awff_rv$port1__read[92:29],
	       32'hAAAAAAAA } ;
  assign f_trace_data$ENQ =
	     !slave_xactor_clearing && !master_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[97] &&
	     slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97 ;
  assign f_trace_data$DEQ = EN_trace_data_out_get ;
  assign f_trace_data$CLR = 1'b0 ;

  // remaining internal signals
  assign master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q3 =
	     master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q1 =
	     master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign master_xactor_shim_wff_rvport1__read_BITS_72__ETC__q2 =
	     master_xactor_shim_wff_rv$port1__read[72:0] ;
  assign slave_xactor_shim_wff_rv_port1__read__6_BIT_73_ETC___d97 =
	     slave_xactor_shim_wff_rv$port1__read[73] &&
	     !master_xactor_shim_awff_rv[97] &&
	     !master_xactor_shim_wff_rv[73] &&
	     f_trace_data$FULL_N ;
  assign stval___1__h6721 =
	     { 32'd0, slave_xactor_shim_wff_rv$port1__read[40:9] } ;
  assign x__h6719 =
	     (slave_xactor_shim_wff_rv$port1__read[8:1] == 8'h0F) ?
	       stval___1__h6721 :
	       y_avValue_fst__h6631 ;
  assign y_avValue_fst__h6631 =
	     { 32'd0, slave_xactor_shim_wff_rv$port1__read[72:41] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (master_xactor_clearing$EN)
	  master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_clearing$D_IN;
	if (master_xactor_shim_arff_rv$EN)
	  master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_arff_rv$D_IN;
	if (master_xactor_shim_awff_rv$EN)
	  master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_awff_rv$D_IN;
	if (master_xactor_shim_bff_rv$EN)
	  master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_bff_rv$D_IN;
	if (master_xactor_shim_rff_rv$EN)
	  master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_rff_rv$D_IN;
	if (master_xactor_shim_wff_rv$EN)
	  master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_wff_rv$D_IN;
	if (slave_xactor_clearing$EN)
	  slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_clearing$D_IN;
	if (slave_xactor_shim_arff_rv$EN)
	  slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_arff_rv$D_IN;
	if (slave_xactor_shim_awff_rv$EN)
	  slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_awff_rv$D_IN;
	if (slave_xactor_shim_bff_rv$EN)
	  slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_bff_rv$D_IN;
	if (slave_xactor_shim_rff_rv$EN)
	  slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_rff_rv$D_IN;
	if (slave_xactor_shim_wff_rv$EN)
	  slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_wff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    master_xactor_clearing = 1'h0;
    master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_shim_bff_rv = 7'h2A;
    master_xactor_shim_rff_rv = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    slave_xactor_clearing = 1'h0;
    slave_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_bff_rv = 7'h2A;
    slave_xactor_shim_rff_rv = 72'hAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkDM_Mem_Tap

