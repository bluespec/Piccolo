//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jul  9 16:18:45 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> word64
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_f3,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    valid,

		    addr,

		    word64,

		    st_amo_val,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port0__write_1,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$port0__write_1,
		cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [70 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1,
	       cache_ctr_wr_rsps_pending_crg$port1__read,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [71 : 0] cache_master_xactor_shim_rff_rv;
  wire [71 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [73 : 0] cache_master_xactor_shim_wff_rv;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [3 : 0] cache_rg_exc_code;
  reg [3 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_f3
  reg [2 : 0] cache_rg_f3;
  wire [2 : 0] cache_rg_f3$D_IN;
  wire cache_rg_f3$EN;

  // register cache_rg_ld_val
  reg [63 : 0] cache_rg_ld_val;
  reg [63 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word32
  reg [31 : 0] cache_rg_lower_word32;
  wire [31 : 0] cache_rg_lower_word32$D_IN;
  wire cache_rg_lower_word32$EN;

  // register cache_rg_lower_word32_full
  reg cache_rg_lower_word32_full;
  wire cache_rg_lower_word32_full$D_IN, cache_rg_lower_word32_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [63 : 0] cache_rg_st_amo_val;
  wire [63 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_word64_set_in_cache
  reg [8 : 0] cache_rg_word64_set_in_cache;
  wire [8 : 0] cache_rg_word64_set_in_cache$D_IN;
  wire cache_rg_word64_set_in_cache$EN;

  // ports of submodule cache_f_fabric_write_reqs
  reg [98 : 0] cache_f_fabric_write_reqs$D_IN;
  wire [98 : 0] cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word64_set
  reg [63 : 0] cache_ram_word64_set$DIB;
  reg [8 : 0] cache_ram_word64_set$ADDRB;
  wire [63 : 0] cache_ram_word64_set$DIA, cache_ram_word64_set$DOB;
  wire [8 : 0] cache_ram_word64_set$ADDRA;
  wire cache_ram_word64_set$ENA,
       cache_ram_word64_set$ENB,
       cache_ram_word64_set$WEA,
       cache_ram_word64_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
	       MUX_cache_dw_output_ld_val$wset_1__VAL_2;
  wire [98 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		MUX_cache_f_fabric_write_reqs$enq_1__VAL_2,
		MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2;
  wire [63 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		MUX_cache_ram_word64_set$a_put_3__VAL_2,
		MUX_cache_rg_ld_val$write_1__VAL_2,
		MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_cache_ram_word64_set$b_put_2__VAL_2,
	       MUX_cache_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_cache_master_xactor_clearing$write_1__SEL_2,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word64_set$a_put_1__SEL_1,
       MUX_cache_ram_word64_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5604;
  reg [31 : 0] v__h6425;
  reg [31 : 0] v__h6526;
  reg [31 : 0] v__h6977;
  reg [31 : 0] v__h15442;
  reg [31 : 0] v__h19086;
  reg [31 : 0] v__h22330;
  reg [31 : 0] v__h25145;
  reg [31 : 0] v__h26849;
  reg [31 : 0] v__h26929;
  reg [31 : 0] v__h27139;
  reg [31 : 0] v__h27257;
  reg [31 : 0] v__h30743;
  reg [31 : 0] v__h30704;
  reg [31 : 0] v__h6060;
  reg [31 : 0] v__h23274;
  reg [31 : 0] v__h23536;
  reg [31 : 0] v__h25517;
  reg [31 : 0] v__h26635;
  reg [31 : 0] v__h26742;
  reg [31 : 0] v__h27573;
  reg [31 : 0] v__h27768;
  reg [31 : 0] v__h30027;
  reg [31 : 0] v__h27864;
  reg [31 : 0] v__h31126;
  reg [31 : 0] v__h5598;
  reg [31 : 0] v__h6054;
  reg [31 : 0] v__h6419;
  reg [31 : 0] v__h6520;
  reg [31 : 0] v__h6971;
  reg [31 : 0] v__h15436;
  reg [31 : 0] v__h19080;
  reg [31 : 0] v__h22324;
  reg [31 : 0] v__h23268;
  reg [31 : 0] v__h23530;
  reg [31 : 0] v__h25139;
  reg [31 : 0] v__h25511;
  reg [31 : 0] v__h26629;
  reg [31 : 0] v__h26736;
  reg [31 : 0] v__h26843;
  reg [31 : 0] v__h26923;
  reg [31 : 0] v__h27133;
  reg [31 : 0] v__h27251;
  reg [31 : 0] v__h27567;
  reg [31 : 0] v__h27762;
  reg [31 : 0] v__h27858;
  reg [31 : 0] v__h30021;
  reg [31 : 0] v__h30698;
  reg [31 : 0] v__h30737;
  reg [31 : 0] v__h31120;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841,
	       IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851,
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443,
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517,
	       IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385,
	       _theResult_____2__h19586,
	       _theResult_____2__h27940,
	       mem_req_wr_data_wdata__h5352,
	       new_value__h18177,
	       new_value__h8148,
	       w1__h19578,
	       w1__h27928,
	       w1__h27932;
  reg [7 : 0] mem_req_wr_data_wstrb__h5353;
  reg [2 : 0] _theResult___snd_snd_val__h5236, size_val__h27412;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1;
  wire [72 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q16;
  wire [63 : 0] IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340,
		IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d354,
		IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852,
		IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449,
		IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d531,
		_theResult___fst__h5221,
		cline_fabric_addr__h22383,
		fabric_addr__h27309,
		ld_val__h25642,
		mem_req_wr_addr_awaddr__h5054,
		new_ld_val__h27894,
		new_st_val__h19308,
		new_st_val__h19590,
		new_st_val__h19681,
		new_st_val__h20661,
		new_st_val__h20665,
		new_st_val__h20669,
		new_st_val__h20673,
		new_st_val__h20678,
		new_st_val__h20684,
		new_st_val__h20689,
		new_st_val__h27944,
		new_st_val__h28035,
		new_st_val__h29895,
		new_st_val__h29899,
		new_st_val__h29903,
		new_st_val__h29907,
		new_st_val__h29912,
		new_st_val__h29918,
		new_st_val__h29923,
		result__h14559,
		result__h14587,
		result__h14615,
		result__h14643,
		result__h14671,
		result__h14699,
		result__h14727,
		result__h14772,
		result__h14800,
		result__h14828,
		result__h14856,
		result__h14884,
		result__h14912,
		result__h14940,
		result__h14968,
		result__h15013,
		result__h15041,
		result__h15069,
		result__h15097,
		result__h15138,
		result__h15166,
		result__h15194,
		result__h15222,
		result__h15263,
		result__h15291,
		result__h15330,
		result__h15358,
		result__h25702,
		result__h25732,
		result__h25759,
		result__h25786,
		result__h25813,
		result__h25840,
		result__h25867,
		result__h25894,
		result__h25938,
		result__h25965,
		result__h25992,
		result__h26019,
		result__h26046,
		result__h26073,
		result__h26100,
		result__h26127,
		result__h26171,
		result__h26198,
		result__h26225,
		result__h26252,
		result__h26292,
		result__h26319,
		result__h26346,
		result__h26373,
		result__h26413,
		result__h26440,
		result__h26478,
		result__h26505,
		result__h28123,
		result__h29031,
		result__h29059,
		result__h29087,
		result__h29115,
		result__h29143,
		result__h29171,
		result__h29199,
		result__h29244,
		result__h29272,
		result__h29300,
		result__h29328,
		result__h29356,
		result__h29384,
		result__h29412,
		result__h29440,
		result__h29485,
		result__h29513,
		result__h29541,
		result__h29569,
		result__h29610,
		result__h29638,
		result__h29666,
		result__h29694,
		result__h29735,
		result__h29763,
		result__h29802,
		result__h29830,
		result__h8203,
		w1___1__h19649,
		w1___1__h28003,
		w2___1__h28004,
		w2__h27934,
		word64__h7969,
		x__h15829,
		x__h27923,
		y__h8239;
  wire [31 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
		cache_rg_st_amo_val_BITS_31_TO_0__q33,
		cline_addr__h22382,
		ld_val5642_BITS_31_TO_0__q40,
		ld_val5642_BITS_63_TO_32__q47,
		new_value148_BITS_31_TO_0__q32,
		w17928_BITS_31_TO_0__q53,
		word64969_BITS_31_TO_0__q19,
		word64969_BITS_63_TO_32__q26;
  wire [21 : 0] pa_ctag__h7827;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
		ld_val5642_BITS_15_TO_0__q39,
		ld_val5642_BITS_31_TO_16__q43,
		ld_val5642_BITS_47_TO_32__q46,
		ld_val5642_BITS_63_TO_48__q50,
		word64969_BITS_15_TO_0__q18,
		word64969_BITS_31_TO_16__q22,
		word64969_BITS_47_TO_32__q25,
		word64969_BITS_63_TO_48__q29;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
	       ld_val5642_BITS_15_TO_8__q41,
	       ld_val5642_BITS_23_TO_16__q42,
	       ld_val5642_BITS_31_TO_24__q44,
	       ld_val5642_BITS_39_TO_32__q45,
	       ld_val5642_BITS_47_TO_40__q48,
	       ld_val5642_BITS_55_TO_48__q49,
	       ld_val5642_BITS_63_TO_56__q51,
	       ld_val5642_BITS_7_TO_0__q38,
	       strobe64__h5219,
	       strobe64__h5223,
	       strobe64__h5227,
	       word64969_BITS_15_TO_8__q20,
	       word64969_BITS_23_TO_16__q21,
	       word64969_BITS_31_TO_24__q23,
	       word64969_BITS_39_TO_32__q24,
	       word64969_BITS_47_TO_40__q27,
	       word64969_BITS_55_TO_48__q28,
	       word64969_BITS_63_TO_56__q30,
	       word64969_BITS_7_TO_0__q17;
  wire [5 : 0] shift_bits__h5069;
  wire [3 : 0] IF_cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_ETC___d196,
	       IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d195,
	       access_exc_code__h4779,
	       b__h22284;
  wire IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d164,
       NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91,
       NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603,
       NOT_cache_ram_state_and_ctag_cset_b_read__54_B_ETC___d202,
       NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d191,
       NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d529,
       NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549,
       NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d557,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d211,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d389,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d523,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d565,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d568,
       NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d572,
       NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d387,
       NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d521,
       NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d547,
       NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d551,
       NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d555,
       NOT_req_f3_BITS_1_TO_0_44_EQ_0b0_45_46_AND_NOT_ETC___d965,
       cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160,
       cache_ram_state_and_ctag_cset_b_read__54_BIT_2_ETC___d203,
       cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200,
       cache_rg_amo_funct7_36_BITS_6_TO_2_37_EQ_0b10__ETC___d375,
       cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148,
       cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d186,
       cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d214,
       cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d219,
       cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d358,
       cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d371,
       cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d212,
       cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d390,
       cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d524,
       cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d527,
       cache_rg_op_33_EQ_2_35_AND_cache_rg_amo_funct7_ETC___d561,
       cache_rg_state_7_EQ_12_46_AND_cache_rg_op_33_E_ETC___d648,
       cache_rg_state_7_EQ_3_67_AND_NOT_cache_rg_op_3_ETC___d176,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d381,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d392,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d576,
       lrsc_result__h15819,
       req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word64
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4: word64 = cache_rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       64'd0 :
	       cache_rg_st_amo_val ;

  // value method exc
  assign exc = cache_rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q16[72:9] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q16[8:1] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q16[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[71] ;

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd99),
	  .guarded(32'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_f_fabric_write_reqs$D_IN),
						     .ENQ(cache_f_fabric_write_reqs$ENQ),
						     .DEQ(cache_f_fabric_write_reqs$DEQ),
						     .CLR(cache_f_fabric_write_reqs$CLR),
						     .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						     .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						     .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) cache_ram_word64_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word64_set$ADDRA),
						  .ADDRB(cache_ram_word64_set$ADDRB),
						  .DIA(cache_ram_word64_set$DIA),
						  .DIB(cache_ram_word64_set$DIB),
						  .WEA(cache_ram_word64_set$WEA),
						  .WEB(cache_ram_word64_set$WEB),
						  .ENA(cache_ram_word64_set$ENA),
						  .ENB(cache_ram_word64_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word64_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     !cache_master_xactor_clearing &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[73] ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 7'd127 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_soc_map$m_is_mem_addr || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d164) &&
	     cache_rg_state_7_EQ_3_67_AND_NOT_cache_rg_op_3_ETC___d176 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd8 &&
	     b__h22284 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq = cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq =
	     CAN_FIRE_RL_cache_rl_rereq &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state_7_EQ_12_46_AND_cache_rg_op_33_E_ETC___d648 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp = cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     cache_f_fabric_write_reqs$FULL_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     cache_rg_state == 4'd12 && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] &&
	     b__h22284 != 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[71] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[71] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      cache_f_fabric_write_reqs$FULL_N) &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d219 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d529 ;
  assign MUX_cache_master_xactor_clearing$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974 ;
  assign MUX_cache_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_44_EQ_0b0_45_46_AND_NOT_ETC___d965 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d381 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d214 ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d186 ||
	      NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d191 ||
	      !cache_soc_map$m_is_mem_addr) ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36 or
	  cache_rg_addr or
	  cache_master_xactor_shim_rff_rv$port1__read or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37)
  begin
    case (cache_rg_f3)
      3'b0:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695;
      3'b001:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723;
      3'b010:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36;
      3'b011:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      (cache_rg_addr[2:0] == 3'h0) ?
		cache_master_xactor_shim_rff_rv$port1__read[66:3] :
		64'd0;
      3'b100:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711;
      3'b101:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731;
      3'b110:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37;
      3'd7: MUX_cache_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 or
	  w17928_BITS_31_TO_0__q53 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851)
  begin
    case (cache_rg_f3)
      3'b0:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805;
      3'b001:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833;
      3'b010:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      { {32{w17928_BITS_31_TO_0__q53[31]}},
		w17928_BITS_31_TO_0__q53 };
      3'b011:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852;
      3'b100:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821;
      3'b101:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841;
      3'b110:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851;
      3'd7: MUX_cache_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h8148 :
	       new_value__h18177 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_f3, cache_rg_pa, x__h27923 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_f3,
	       cache_rg_addr,
	       IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d531 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 =
	     { cache_rg_f3, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       fabric_addr__h27309,
	       8'd0,
	       size_val__h27412,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h22383, 29'd7143424 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word64_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 :
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_2 =
	     cache_rg_word64_set_in_cache + 9'd1 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd5 :
	       4'd7 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h15829 :
	       IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h19590 :
	       _theResult_____2__h19586 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_44_EQ_0b0_45_46_AND_NOT_ETC___d965 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     cache_soc_map$m_is_mem_addr ?
	       IF_cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_ETC___d196 :
	       4'd12 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[71] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d219 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$port0__write_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h5054,
	       8'd0,
	       _theResult___snd_snd_val__h5236,
	       18'd65536 } ;
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h5352,
	       mem_req_wr_data_wstrb__h5353,
	       1'd1 } ;
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port1__read =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h22284 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     MUX_cache_master_xactor_clearing$write_1__SEL_2 ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d524 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_4)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 4'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 4'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    default: cache_rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_44_EQ_0b0_45_46_AND_NOT_ETC___d965 ;

  // register cache_rg_f3
  assign cache_rg_f3$D_IN = req_f3 ;
  assign cache_rg_f3$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 64'd1;
      default: cache_rg_ld_val$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d381 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word32
  assign cache_rg_lower_word32$D_IN = 32'h0 ;
  assign cache_rg_lower_word32$EN = 1'b0 ;

  // register cache_rg_lower_word32_full
  assign cache_rg_lower_word32_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word32_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d214 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     EN_req || WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d576 ||
	     EN_req ;

  // register cache_rg_state
  always@(EN_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_rg_state$write_1__SEL_4 or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    MUX_cache_rg_state$write_1__SEL_4:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d186 ||
	      NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d191 ||
	      !cache_soc_map$m_is_mem_addr) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_word64_set_in_cache
  assign cache_rg_word64_set_in_cache$D_IN =
	     MUX_cache_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word64_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word64_set$b_put_2__VAL_4 ;
  assign cache_rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_fabric_write_reqs
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_cache_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_cache_f_fabric_write_reqs$enq_1__SEL_2:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
      default: cache_f_fabric_write_reqs$D_IN =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d529 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word64_set
  assign cache_ram_word64_set$ADDRA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_rg_word64_set_in_cache :
	       cache_rg_addr[11:3] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$ADDRB = req_addr[11:3];
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$ADDRB = cache_rg_addr[11:3];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_4;
      default: cache_ram_word64_set$ADDRB =
		   9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$DIA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_master_xactor_shim_rff_rv$port1__read[66:3] :
	       MUX_cache_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$WEA = 1'd1 ;
  assign cache_ram_word64_set$WEB = 1'd0 ;
  assign cache_ram_word64_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d392 ;
  assign cache_ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340 =
	     (cache_rg_addr[2:0] == 3'h0) ? word64__h7969 : 64'd0 ;
  assign IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d354 =
	     (cache_rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852 =
	     (cache_rg_addr[2:0] == 3'h0) ? ld_val__h25642 : 64'd0 ;
  assign IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 =
	     (cache_rg_f3 == 3'b010) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q33[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q33 } :
	       cache_rg_st_amo_val ;
  assign IF_cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_ETC___d196 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d195 ;
  assign IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d164 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h15819 ||
	       cache_f_fabric_write_reqs$FULL_N :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 ||
	       cache_f_fabric_write_reqs$FULL_N ;
  assign IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d195 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_ETC___d531 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_st_amo_val :
	       new_st_val__h19308 ;
  assign NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__54_B_ETC___d202 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 ;
  assign NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d191 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) ;
  assign NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d529 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d527 ||
	      NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d389) ;
  assign NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d547 ;
  assign NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d557 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d555 ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d211 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d389 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d523 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d565 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d568 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d572 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d387 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 ;
  assign NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d521 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d547 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d551 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d555 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign NOT_req_f3_BITS_1_TO_0_44_EQ_0b0_45_46_AND_NOT_ETC___d965 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign _theResult___fst__h5221 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h5069 ;
  assign access_exc_code__h4779 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign b__h22284 = cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q35 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q1 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:43] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[58:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:59] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 =
	     cache_master_xactor_shim_rff_rv$port1__read[10:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:11] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[26:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:27] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[42:35] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_wff_rv$port1__read[72:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7827 ;
  assign cache_ram_state_and_ctag_cset_b_read__54_BIT_2_ETC___d203 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__54_B_ETC___d202 ;
  assign cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_36_BITS_6_TO_2_37_EQ_0b10__ETC___d375 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) &&
	     cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d186 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) ;
  assign cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d214 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__54_BIT_2_ETC___d203 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d212 ;
  assign cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d219 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h15819 ;
  assign cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d358 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d371 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d212 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d211 ;
  assign cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d390 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d387 ||
	     NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d389 ;
  assign cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d524 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d521 ||
	     NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d523 ;
  assign cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d527 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148) ;
  assign cache_rg_op_33_EQ_2_35_AND_cache_rg_amo_funct7_ETC___d561 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h15819 &&
	     NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q33 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_state_7_EQ_12_46_AND_cache_rg_op_33_E_ETC___d648 =
	     cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h22284 == 4'd0 ;
  assign cache_rg_state_7_EQ_3_67_AND_NOT_cache_rg_op_3_ETC___d176 =
	     cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d381 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d392 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_33_EQ_1_41_OR_cache_rg_op_33_EQ_2__ETC___d390 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d568 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d576 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d389 ;
  assign cline_addr__h22382 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h22383 = { 32'd0, cline_addr__h22382 } ;
  assign fabric_addr__h27309 = { 32'd0, cache_rg_pa } ;
  assign ld_val5642_BITS_15_TO_0__q39 = ld_val__h25642[15:0] ;
  assign ld_val5642_BITS_15_TO_8__q41 = ld_val__h25642[15:8] ;
  assign ld_val5642_BITS_23_TO_16__q42 = ld_val__h25642[23:16] ;
  assign ld_val5642_BITS_31_TO_0__q40 = ld_val__h25642[31:0] ;
  assign ld_val5642_BITS_31_TO_16__q43 = ld_val__h25642[31:16] ;
  assign ld_val5642_BITS_31_TO_24__q44 = ld_val__h25642[31:24] ;
  assign ld_val5642_BITS_39_TO_32__q45 = ld_val__h25642[39:32] ;
  assign ld_val5642_BITS_47_TO_32__q46 = ld_val__h25642[47:32] ;
  assign ld_val5642_BITS_47_TO_40__q48 = ld_val__h25642[47:40] ;
  assign ld_val5642_BITS_55_TO_48__q49 = ld_val__h25642[55:48] ;
  assign ld_val5642_BITS_63_TO_32__q47 = ld_val__h25642[63:32] ;
  assign ld_val5642_BITS_63_TO_48__q50 = ld_val__h25642[63:48] ;
  assign ld_val5642_BITS_63_TO_56__q51 = ld_val__h25642[63:56] ;
  assign ld_val5642_BITS_7_TO_0__q38 = ld_val__h25642[7:0] ;
  assign ld_val__h25642 = MUX_cache_dw_output_ld_val$wset_1__VAL_1 ;
  assign lrsc_result__h15819 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148 ;
  assign mem_req_wr_addr_awaddr__h5054 =
	     { 32'd0, cache_f_fabric_write_reqs$D_OUT[95:64] } ;
  assign new_ld_val__h27894 = MUX_cache_dw_output_ld_val$wset_1__VAL_2 ;
  assign new_st_val__h19308 = MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign new_st_val__h19590 = { 32'd0, _theResult_____2__h19586[31:0] } ;
  assign new_st_val__h19681 =
	     IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 +
	     IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ;
  assign new_st_val__h20661 = w1__h19578 ^ w2__h27934 ;
  assign new_st_val__h20665 = w1__h19578 & w2__h27934 ;
  assign new_st_val__h20669 = w1__h19578 | w2__h27934 ;
  assign new_st_val__h20673 =
	     (w1__h19578 < w2__h27934) ? w1__h19578 : w2__h27934 ;
  assign new_st_val__h20678 =
	     (w1__h19578 <= w2__h27934) ? w2__h27934 : w1__h19578 ;
  assign new_st_val__h20684 =
	     ((IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ^
	       64'h8000000000000000)) ?
	       w1__h19578 :
	       w2__h27934 ;
  assign new_st_val__h20689 =
	     ((IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ^
	       64'h8000000000000000)) ?
	       w2__h27934 :
	       w1__h19578 ;
  assign new_st_val__h27944 = { 32'd0, _theResult_____2__h27940[31:0] } ;
  assign new_st_val__h28035 =
	     new_ld_val__h27894 +
	     IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ;
  assign new_st_val__h29895 = w1__h27932 ^ w2__h27934 ;
  assign new_st_val__h29899 = w1__h27932 & w2__h27934 ;
  assign new_st_val__h29903 = w1__h27932 | w2__h27934 ;
  assign new_st_val__h29907 =
	     (w1__h27932 < w2__h27934) ? w1__h27932 : w2__h27934 ;
  assign new_st_val__h29912 =
	     (w1__h27932 <= w2__h27934) ? w2__h27934 : w1__h27932 ;
  assign new_st_val__h29918 =
	     ((new_ld_val__h27894 ^ 64'h8000000000000000) <
	      (IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ^
	       64'h8000000000000000)) ?
	       w1__h27932 :
	       w2__h27934 ;
  assign new_st_val__h29923 =
	     ((new_ld_val__h27894 ^ 64'h8000000000000000) <=
	      (IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_cache_r_ETC___d449 ^
	       64'h8000000000000000)) ?
	       w2__h27934 :
	       w1__h27932 ;
  assign new_value148_BITS_31_TO_0__q32 = new_value__h8148[31:0] ;
  assign pa_ctag__h7827 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h14559 =
	     { {56{word64969_BITS_15_TO_8__q20[7]}},
	       word64969_BITS_15_TO_8__q20 } ;
  assign result__h14587 =
	     { {56{word64969_BITS_23_TO_16__q21[7]}},
	       word64969_BITS_23_TO_16__q21 } ;
  assign result__h14615 =
	     { {56{word64969_BITS_31_TO_24__q23[7]}},
	       word64969_BITS_31_TO_24__q23 } ;
  assign result__h14643 =
	     { {56{word64969_BITS_39_TO_32__q24[7]}},
	       word64969_BITS_39_TO_32__q24 } ;
  assign result__h14671 =
	     { {56{word64969_BITS_47_TO_40__q27[7]}},
	       word64969_BITS_47_TO_40__q27 } ;
  assign result__h14699 =
	     { {56{word64969_BITS_55_TO_48__q28[7]}},
	       word64969_BITS_55_TO_48__q28 } ;
  assign result__h14727 =
	     { {56{word64969_BITS_63_TO_56__q30[7]}},
	       word64969_BITS_63_TO_56__q30 } ;
  assign result__h14772 = { 56'd0, word64__h7969[7:0] } ;
  assign result__h14800 = { 56'd0, word64__h7969[15:8] } ;
  assign result__h14828 = { 56'd0, word64__h7969[23:16] } ;
  assign result__h14856 = { 56'd0, word64__h7969[31:24] } ;
  assign result__h14884 = { 56'd0, word64__h7969[39:32] } ;
  assign result__h14912 = { 56'd0, word64__h7969[47:40] } ;
  assign result__h14940 = { 56'd0, word64__h7969[55:48] } ;
  assign result__h14968 = { 56'd0, word64__h7969[63:56] } ;
  assign result__h15013 =
	     { {48{word64969_BITS_15_TO_0__q18[15]}},
	       word64969_BITS_15_TO_0__q18 } ;
  assign result__h15041 =
	     { {48{word64969_BITS_31_TO_16__q22[15]}},
	       word64969_BITS_31_TO_16__q22 } ;
  assign result__h15069 =
	     { {48{word64969_BITS_47_TO_32__q25[15]}},
	       word64969_BITS_47_TO_32__q25 } ;
  assign result__h15097 =
	     { {48{word64969_BITS_63_TO_48__q29[15]}},
	       word64969_BITS_63_TO_48__q29 } ;
  assign result__h15138 = { 48'd0, word64__h7969[15:0] } ;
  assign result__h15166 = { 48'd0, word64__h7969[31:16] } ;
  assign result__h15194 = { 48'd0, word64__h7969[47:32] } ;
  assign result__h15222 = { 48'd0, word64__h7969[63:48] } ;
  assign result__h15263 =
	     { {32{word64969_BITS_31_TO_0__q19[31]}},
	       word64969_BITS_31_TO_0__q19 } ;
  assign result__h15291 =
	     { {32{word64969_BITS_63_TO_32__q26[31]}},
	       word64969_BITS_63_TO_32__q26 } ;
  assign result__h15330 = { 32'd0, word64__h7969[31:0] } ;
  assign result__h15358 = { 32'd0, word64__h7969[63:32] } ;
  assign result__h25702 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 } ;
  assign result__h25732 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h25759 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h25786 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h25813 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h25840 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h25867 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h25894 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h25938 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[10:3] } ;
  assign result__h25965 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[18:11] } ;
  assign result__h25992 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[26:19] } ;
  assign result__h26019 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[34:27] } ;
  assign result__h26046 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[42:35] } ;
  assign result__h26073 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[50:43] } ;
  assign result__h26100 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[58:51] } ;
  assign result__h26127 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[66:59] } ;
  assign result__h26171 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h26198 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h26225 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h26252 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h26292 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[18:3] } ;
  assign result__h26319 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[34:19] } ;
  assign result__h26346 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[50:35] } ;
  assign result__h26373 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[66:51] } ;
  assign result__h26413 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h26440 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h26478 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[34:3] } ;
  assign result__h26505 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[66:35] } ;
  assign result__h28123 =
	     { {56{ld_val5642_BITS_7_TO_0__q38[7]}},
	       ld_val5642_BITS_7_TO_0__q38 } ;
  assign result__h29031 =
	     { {56{ld_val5642_BITS_15_TO_8__q41[7]}},
	       ld_val5642_BITS_15_TO_8__q41 } ;
  assign result__h29059 =
	     { {56{ld_val5642_BITS_23_TO_16__q42[7]}},
	       ld_val5642_BITS_23_TO_16__q42 } ;
  assign result__h29087 =
	     { {56{ld_val5642_BITS_31_TO_24__q44[7]}},
	       ld_val5642_BITS_31_TO_24__q44 } ;
  assign result__h29115 =
	     { {56{ld_val5642_BITS_39_TO_32__q45[7]}},
	       ld_val5642_BITS_39_TO_32__q45 } ;
  assign result__h29143 =
	     { {56{ld_val5642_BITS_47_TO_40__q48[7]}},
	       ld_val5642_BITS_47_TO_40__q48 } ;
  assign result__h29171 =
	     { {56{ld_val5642_BITS_55_TO_48__q49[7]}},
	       ld_val5642_BITS_55_TO_48__q49 } ;
  assign result__h29199 =
	     { {56{ld_val5642_BITS_63_TO_56__q51[7]}},
	       ld_val5642_BITS_63_TO_56__q51 } ;
  assign result__h29244 = { 56'd0, ld_val__h25642[7:0] } ;
  assign result__h29272 = { 56'd0, ld_val__h25642[15:8] } ;
  assign result__h29300 = { 56'd0, ld_val__h25642[23:16] } ;
  assign result__h29328 = { 56'd0, ld_val__h25642[31:24] } ;
  assign result__h29356 = { 56'd0, ld_val__h25642[39:32] } ;
  assign result__h29384 = { 56'd0, ld_val__h25642[47:40] } ;
  assign result__h29412 = { 56'd0, ld_val__h25642[55:48] } ;
  assign result__h29440 = { 56'd0, ld_val__h25642[63:56] } ;
  assign result__h29485 =
	     { {48{ld_val5642_BITS_15_TO_0__q39[15]}},
	       ld_val5642_BITS_15_TO_0__q39 } ;
  assign result__h29513 =
	     { {48{ld_val5642_BITS_31_TO_16__q43[15]}},
	       ld_val5642_BITS_31_TO_16__q43 } ;
  assign result__h29541 =
	     { {48{ld_val5642_BITS_47_TO_32__q46[15]}},
	       ld_val5642_BITS_47_TO_32__q46 } ;
  assign result__h29569 =
	     { {48{ld_val5642_BITS_63_TO_48__q50[15]}},
	       ld_val5642_BITS_63_TO_48__q50 } ;
  assign result__h29610 = { 48'd0, ld_val__h25642[15:0] } ;
  assign result__h29638 = { 48'd0, ld_val__h25642[31:16] } ;
  assign result__h29666 = { 48'd0, ld_val__h25642[47:32] } ;
  assign result__h29694 = { 48'd0, ld_val__h25642[63:48] } ;
  assign result__h29735 =
	     { {32{ld_val5642_BITS_31_TO_0__q40[31]}},
	       ld_val5642_BITS_31_TO_0__q40 } ;
  assign result__h29763 =
	     { {32{ld_val5642_BITS_63_TO_32__q47[31]}},
	       ld_val5642_BITS_63_TO_32__q47 } ;
  assign result__h29802 = { 32'd0, ld_val__h25642[31:0] } ;
  assign result__h29830 = { 32'd0, ld_val__h25642[63:32] } ;
  assign result__h8203 =
	     { {56{word64969_BITS_7_TO_0__q17[7]}},
	       word64969_BITS_7_TO_0__q17 } ;
  assign shift_bits__h5069 =
	     { cache_f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h5219 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h5223 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h5227 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[66:64] ;
  assign w17928_BITS_31_TO_0__q53 = w1__h27928[31:0] ;
  assign w1___1__h19649 = { 32'd0, new_value__h8148[31:0] } ;
  assign w1___1__h28003 = { 32'd0, w1__h27928[31:0] } ;
  assign w2___1__h28004 = { 32'd0, cache_rg_st_amo_val[31:0] } ;
  assign w2__h27934 =
	     (cache_rg_f3 == 3'b010) ? w2___1__h28004 : cache_rg_st_amo_val ;
  assign word64969_BITS_15_TO_0__q18 = word64__h7969[15:0] ;
  assign word64969_BITS_15_TO_8__q20 = word64__h7969[15:8] ;
  assign word64969_BITS_23_TO_16__q21 = word64__h7969[23:16] ;
  assign word64969_BITS_31_TO_0__q19 = word64__h7969[31:0] ;
  assign word64969_BITS_31_TO_16__q22 = word64__h7969[31:16] ;
  assign word64969_BITS_31_TO_24__q23 = word64__h7969[31:24] ;
  assign word64969_BITS_39_TO_32__q24 = word64__h7969[39:32] ;
  assign word64969_BITS_47_TO_32__q25 = word64__h7969[47:32] ;
  assign word64969_BITS_47_TO_40__q27 = word64__h7969[47:40] ;
  assign word64969_BITS_55_TO_48__q28 = word64__h7969[55:48] ;
  assign word64969_BITS_63_TO_32__q26 = word64__h7969[63:32] ;
  assign word64969_BITS_63_TO_48__q29 = word64__h7969[63:48] ;
  assign word64969_BITS_63_TO_56__q30 = word64__h7969[63:56] ;
  assign word64969_BITS_7_TO_0__q17 = word64__h7969[7:0] ;
  assign word64__h7969 = cache_ram_word64_set$DOB & y__h8239 ;
  assign x__h15829 = { 63'd0, lrsc_result__h15819 } ;
  assign x__h27923 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h27944 :
	       _theResult_____2__h27940 ;
  assign y__h8239 =
	     {64{cache_ram_state_and_ctag_cset$DOB[22] &&
		 cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160}} ;
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[97:96])
      2'b0: _theResult___snd_snd_val__h5236 = 3'b0;
      2'b01: _theResult___snd_snd_val__h5236 = 3'b001;
      2'b10: _theResult___snd_snd_val__h5236 = 3'b010;
      2'b11: _theResult___snd_snd_val__h5236 = 3'b011;
    endcase
  end
  always@(cache_rg_f3)
  begin
    case (cache_rg_f3[1:0])
      2'b0: size_val__h27412 = 3'b0;
      2'b01: size_val__h27412 = 3'b001;
      2'b10: size_val__h27412 = 3'b010;
      2'd3: size_val__h27412 = 3'b011;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe64__h5219 or strobe64__h5223 or strobe64__h5227)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[97:96])
      2'b0: mem_req_wr_data_wstrb__h5353 = strobe64__h5219;
      2'b01: mem_req_wr_data_wstrb__h5353 = strobe64__h5223;
      2'b10: mem_req_wr_data_wstrb__h5353 = strobe64__h5227;
      2'b11: mem_req_wr_data_wstrb__h5353 = 8'b11111111;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or _theResult___fst__h5221)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[97:96])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h5352 = _theResult___fst__h5221;
      2'd3:
	  mem_req_wr_data_wdata__h5352 =
	      cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h8203 or
	  result__h14559 or
	  result__h14587 or
	  result__h14615 or
	  result__h14643 or
	  result__h14671 or result__h14699 or result__h14727)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h8203;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14559;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14587;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14615;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14643;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14671;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14699;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 =
	      result__h14727;
    endcase
  end
  always@(cache_rg_addr or
	  result__h15013 or
	  result__h15041 or result__h15069 or result__h15097)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 =
	      result__h15013;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 =
	      result__h15041;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 =
	      result__h15069;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 =
	      result__h15097;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h14772 or
	  result__h14800 or
	  result__h14828 or
	  result__h14856 or
	  result__h14884 or
	  result__h14912 or result__h14940 or result__h14968)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14772;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14800;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14828;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14856;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14884;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14912;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14940;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 =
	      result__h14968;
    endcase
  end
  always@(cache_rg_addr or
	  result__h15138 or
	  result__h15166 or result__h15194 or result__h15222)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 =
	      result__h15138;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 =
	      result__h15166;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 =
	      result__h15194;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 =
	      result__h15222;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h15330 or result__h15358)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338 =
	      result__h15330;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338 =
	      result__h15358;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h15263 or result__h15291)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31 =
	      result__h15263;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31 =
	      result__h15291;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338)
  begin
    case (cache_rg_f3)
      3'b0:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287;
      3'b001:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317;
      3'b010:
	  new_value__h8148 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result5263__ETC__q31;
      3'b011:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340;
      3'b100:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304;
      3'b101:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326;
      3'b110:
	  new_value__h8148 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338;
      3'd7: new_value__h8148 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 or
	  w1___1__h19649 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287;
      3'b001:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317;
      3'b010: w1__h19578 = w1___1__h19649;
      3'b011:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340;
      3'b100:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304;
      3'b101:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326;
      3'b110:
	  w1__h19578 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338;
      3'd7: w1__h19578 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 =
	      { cache_ram_word64_set$DOB[63:16], cache_rg_st_amo_val[15:0] };
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:8], cache_rg_st_amo_val[7:0] };
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_ram_word64_set$DOB[63:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317 or
	  new_value148_BITS_31_TO_0__q32 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d287;
      3'b001:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d317;
      3'b010:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      { {32{new_value148_BITS_31_TO_0__q32[31]}},
		new_value148_BITS_31_TO_0__q32 };
      3'b011:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d340;
      3'b100:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d304;
      3'b101:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d326;
      3'b110:
	  IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d338;
      3'd7: IF_cache_rg_f3_21_EQ_0b10_27_THEN_SEXT_IF_cach_ETC___d385 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h20689 or
	  new_st_val__h19681 or
	  w2__h27934 or
	  new_st_val__h20661 or
	  new_st_val__h20669 or
	  new_st_val__h20665 or
	  new_st_val__h20684 or new_st_val__h20673 or new_st_val__h20678)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h19586 = new_st_val__h19681;
      5'b00001: _theResult_____2__h19586 = w2__h27934;
      5'b00100: _theResult_____2__h19586 = new_st_val__h20661;
      5'b01000: _theResult_____2__h19586 = new_st_val__h20669;
      5'b01100: _theResult_____2__h19586 = new_st_val__h20665;
      5'b10000: _theResult_____2__h19586 = new_st_val__h20684;
      5'b11000: _theResult_____2__h19586 = new_st_val__h20673;
      5'b11100: _theResult_____2__h19586 = new_st_val__h20678;
      default: _theResult_____2__h19586 = new_st_val__h20689;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19308)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 =
	      { cache_ram_word64_set$DOB[63:16], new_st_val__h19308[15:0] };
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19308[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19308[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 =
	      { new_st_val__h19308[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19308)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:8], new_st_val__h19308[7:0] };
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:16],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:24],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:40],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { cache_ram_word64_set$DOB[63:56],
		new_st_val__h19308[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 =
	      { new_st_val__h19308[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34 =
	      { cache_ram_word64_set$DOB[63:32], cache_rg_st_amo_val[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d425;
      3'b001:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d434;
      3'b010:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q34;
      3'b011:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 =
	      cache_rg_st_amo_val;
      default: IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26292 or
	  result__h26319 or result__h26346 or result__h26373)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 =
	      result__h26292;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 =
	      result__h26319;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 =
	      result__h26346;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 =
	      result__h26373;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d731 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26171 or
	  result__h26198 or result__h26225 or result__h26252)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 =
	      result__h26171;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 =
	      result__h26198;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 =
	      result__h26225;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 =
	      result__h26252;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d723 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h25938 or
	  result__h25965 or
	  result__h25992 or
	  result__h26019 or
	  result__h26046 or
	  result__h26073 or result__h26100 or result__h26127)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h25938;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h25965;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h25992;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h26019;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h26046;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h26073;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h26100;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d711 =
	      result__h26127;
    endcase
  end
  always@(cache_rg_addr or
	  result__h25702 or
	  result__h25732 or
	  result__h25759 or
	  result__h25786 or
	  result__h25813 or
	  result__h25840 or result__h25867 or result__h25894)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25702;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25732;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25759;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25786;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25813;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25840;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25867;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d695 =
	      result__h25894;
    endcase
  end
  always@(cache_rg_addr or result__h26413 or result__h26440)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36 =
	      result__h26413;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36 =
	      result__h26440;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6413__ETC__q36 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h26478 or result__h26505)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37 =
	      result__h26478;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37 =
	      result__h26505;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6478__ETC__q37 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h29802 or result__h29830)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851 =
	      result__h29802;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851 =
	      result__h29830;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h29485 or
	  result__h29513 or result__h29541 or result__h29569)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 =
	      result__h29485;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 =
	      result__h29513;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 =
	      result__h29541;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 =
	      result__h29569;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h29610 or
	  result__h29638 or result__h29666 or result__h29694)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 =
	      result__h29610;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 =
	      result__h29638;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 =
	      result__h29666;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 =
	      result__h29694;
      default: IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h29244 or
	  result__h29272 or
	  result__h29300 or
	  result__h29328 or
	  result__h29356 or
	  result__h29384 or result__h29412 or result__h29440)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29244;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29272;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29300;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29328;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29356;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29384;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29412;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 =
	      result__h29440;
    endcase
  end
  always@(cache_rg_addr or
	  result__h28123 or
	  result__h29031 or
	  result__h29059 or
	  result__h29087 or
	  result__h29115 or
	  result__h29143 or result__h29171 or result__h29199)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h28123;
      3'h1:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29031;
      3'h2:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29059;
      3'h3:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29087;
      3'h4:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29115;
      3'h5:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29143;
      3'h6:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29171;
      3'h7:
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 =
	      result__h29199;
    endcase
  end
  always@(cache_rg_addr or result__h29735 or result__h29763)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52 =
	      result__h29735;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52 =
	      result__h29763;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805;
      3'b001:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833;
      3'b010:
	  w1__h27928 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result9735__ETC__q52;
      3'b011:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852;
      3'b100:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821;
      3'b101:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841;
      3'b110:
	  w1__h27928 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851;
      3'd7: w1__h27928 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833 or
	  w1___1__h28003 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d805;
      3'b001:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d833;
      3'b010: w1__h27932 = w1___1__h28003;
      3'b011:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d852;
      3'b100:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d821;
      3'b101:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d841;
      3'b110:
	  w1__h27932 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d851;
      3'd7: w1__h27932 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h29923 or
	  new_st_val__h28035 or
	  w2__h27934 or
	  new_st_val__h29895 or
	  new_st_val__h29903 or
	  new_st_val__h29899 or
	  new_st_val__h29918 or new_st_val__h29907 or new_st_val__h29912)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27940 = new_st_val__h28035;
      5'b00001: _theResult_____2__h27940 = w2__h27934;
      5'b00100: _theResult_____2__h27940 = new_st_val__h29895;
      5'b01000: _theResult_____2__h27940 = new_st_val__h29903;
      5'b01100: _theResult_____2__h27940 = new_st_val__h29899;
      5'b10000: _theResult_____2__h27940 = new_st_val__h29918;
      5'b11000: _theResult_____2__h27940 = new_st_val__h29907;
      5'b11100: _theResult_____2__h27940 = new_st_val__h29912;
      default: _theResult_____2__h27940 = new_st_val__h29923;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19308)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54 =
	      { cache_ram_word64_set$DOB[63:32], new_st_val__h19308[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54 =
	      { new_st_val__h19308[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54 or
	  new_st_val__h19308)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d499;
      3'b001:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d508;
      3'b010:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q54;
      3'b011:
	  IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 =
	      new_st_val__h19308;
      default: IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d354)
  begin
    case (cache_rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h18177 =
	      IF_cache_rg_addr_29_BITS_2_TO_0_82_EQ_0x0_23_T_ETC___d354;
      3'd7: new_value__h18177 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word32_full$EN)
	  cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word32_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_f3$EN) cache_rg_f3 <= `BSV_ASSIGNMENT_DELAY cache_rg_f3$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word32$EN)
      cache_rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word32$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_word64_set_in_cache$EN)
      cache_rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv = 72'hAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 4'hA;
    cache_rg_f3 = 3'h2;
    cache_rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word32 = 32'hAAAAAAAA;
    cache_rg_lower_word32_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h5604 = $stime;
	  #0;
	end
    v__h5598 = v__h5604 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h5598);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", mem_req_wr_addr_awaddr__h5054);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", _theResult___snd_snd_val__h5236, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", mem_req_wr_data_wdata__h5352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", mem_req_wr_data_wstrb__h5353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h6425 = $stime;
	  #0;
	end
    v__h6419 = v__h6425 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h6419,
		 "D_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h6526 = $stime;
	  #0;
	end
    v__h6520 = v__h6526 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h6520, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h6977 = $stime;
	  #0;
	end
    v__h6971 = v__h6977 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6971,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7827,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4:3],
		 cache_rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d358)
	begin
	  v__h15442 = $stime;
	  #0;
	end
    v__h15436 = v__h15442 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d358)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h15436,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 word64__h7969,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__54_BITS__ETC___d160 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d358)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 word64__h7969);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_0_34_OR_cache_rg_op_33_EQ_2__ETC___d371)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_36_BITS_6_TO_2_37_EQ_0b10__ETC___d375)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_29_EQ_cache_rg_lrsc_pa_47___d200 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_47_EQ_cache_rg_addr_29___d148 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("        AMO SC result = %0d", lrsc_result__h15819);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549)
	$write(" 0x%0x",
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d443);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d549)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_33_EQ_2_35_69_OR_NOT_cache_rg__ETC___d551)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d557)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_33_EQ_0_34_68_AND_NOT_cache_rg_ETC___d557)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_2_35_AND_cache_rg_amo_funct7_ETC___d561)
	begin
	  v__h19086 = $stime;
	  #0;
	end
    v__h19080 = v__h19086 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_2_35_AND_cache_rg_amo_funct7_ETC___d561)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h19080,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 64'd1,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_33_EQ_2_35_AND_cache_rg_amo_funct7_ETC___d561)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d565)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_f3,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h7969,
		 word64__h7969);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h7969,
		 word64__h7969,
		 new_st_val__h19308);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$write(" 0x%0x",
	       IF_cache_rg_f3_21_EQ_0b0_22_THEN_IF_cache_rg_a_ETC___d517);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d570)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_33_EQ_1_41_08_AND_NOT_cache_rg_ETC___d572)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h22330 = $stime;
	  #0;
	end
    v__h22324 = v__h22330 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_start_cache_refill: ", v__h22324, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cline_fabric_addr__h22383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h25145 = $stime;
	  #0;
	end
    v__h25139 = v__h25145 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h25139,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", fabric_addr__h27309);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", size_val__h27412, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h26849 = $stime;
	  #0;
	end
    v__h26843 = v__h26849 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h26843,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h26929 = $stime;
	  #0;
	end
    v__h26923 = v__h26929 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h26923,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h27139 = $stime;
	  #0;
	end
    v__h27133 = v__h27139 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h27133,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h27257 = $stime;
	  #0;
	end
    v__h27251 = v__h27257 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h27251,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", fabric_addr__h27309);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", size_val__h27412, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h30743 = $stime;
	  #0;
	end
    v__h30737 = v__h30743 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h30737,
	       "D_MMU_Cache",
	       $unsigned(b__h22284));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h30704 = $stime;
	  #0;
	end
    v__h30698 = v__h30704 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h30698,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h6060 = $stime;
	  #0;
	end
    v__h6054 = v__h6060 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_start_reset", v__h6054, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	begin
	  v__h23274 = $stime;
	  #0;
	end
    v__h23268 = v__h23274 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h23268,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h23536 = $stime;
	  #0;
	end
    v__h23530 = v__h23536 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h23530,
		 "D_MMU_Cache",
		 access_exc_code__h4779);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 cache_rg_word64_set_in_cache,
		 cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write(" 0x%0x", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__9_ULE_2_02___d603)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h25517 = $stime;
	  #0;
	end
    v__h25511 = v__h25517 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h25511,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h26635 = $stime;
	  #0;
	end
    v__h26629 = v__h26635 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h26629,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 ld_val__h25642);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h26742 = $stime;
	  #0;
	end
    v__h26736 = v__h26742 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h26736,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h27573 = $stime;
	  #0;
	end
    v__h27567 = v__h27573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h27567,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h27768 = $stime;
	  #0;
	end
    v__h27762 = v__h27768 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h27762,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h30027 = $stime;
	  #0;
	end
    v__h30021 = v__h30027 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h30021,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 new_ld_val__h27894);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h27864 = $stime;
	  #0;
	end
    v__h27858 = v__h27864 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h27858,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	begin
	  v__h31126 = $stime;
	  #0;
	end
    v__h31120 = v__h31126 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write("%0d: %s.req: op:", v__h31120, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_44_EQ_0b0_45_OR_req_f3_BITS_ETC___d974 &&
	  NOT_cache_cfg_verbosity_read__9_ULE_1_0___d91)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

